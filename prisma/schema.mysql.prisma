// Prisma schema for local MySQL development

generator client {
  provider = "prisma-client"
  output   = "./generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") // e.g. mysql://user:pass@host:3306/db
}

model Calendar {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#4f46e5")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events         Event[]
  members        CalendarParticipant[]
  recurringSlots RecurringSlot[]
}

model Event {
  id          String   @id @default(cuid())
  calendarId  String
  title       String
  description String?
  startAt     DateTime
  endAt       DateTime
  allDay      Boolean  @default(false)
  color       String   @default("#60a5fa")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  calendar  Calendar           @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  attendees EventParticipant[]

  @@index([calendarId, startAt, endAt])
}

model Participant {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  calendars CalendarParticipant[]
  events    EventParticipant[]
}

model CalendarParticipant {
  id            String @id @default(cuid())
  calendarId    String
  participantId String

  calendar    Calendar    @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  participant Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([calendarId, participantId])
  @@index([participantId])
}

model RecurringSlot {
  id             String @id @default(cuid())
  calendarId     String
  dayOfWeek      Int
  startMinutes   Int
  endMinutes     Int
  startsOn       DateTime @default(now())
  endsOn         DateTime?
  eventTitle     String  // 원래 이벤트 제목 저장
  eventStartDate DateTime // 원래 이벤트의 시작일 (해당 주의 반복 생성 기준)
  participantNames String? // 참여자 이름 (JSON 배열 형태로 저장)
  color          String  @default("#60a5fa")

  calendar Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)

  @@index([calendarId, dayOfWeek, startsOn])
}

model EventParticipant {
  id            String @id @default(cuid())
  eventId       String
  participantId String

  event       Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  participant Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([eventId, participantId])
  @@index([participantId])
}


