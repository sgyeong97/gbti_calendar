
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `CalendarParticipant` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model CalendarParticipant
 * 
 */
export type CalendarParticipantModel = runtime.Types.Result.DefaultSelection<Prisma.$CalendarParticipantPayload>

export type AggregateCalendarParticipant = {
  _count: CalendarParticipantCountAggregateOutputType | null
  _min: CalendarParticipantMinAggregateOutputType | null
  _max: CalendarParticipantMaxAggregateOutputType | null
}

export type CalendarParticipantMinAggregateOutputType = {
  id: string | null
  calendarId: string | null
  participantId: string | null
}

export type CalendarParticipantMaxAggregateOutputType = {
  id: string | null
  calendarId: string | null
  participantId: string | null
}

export type CalendarParticipantCountAggregateOutputType = {
  id: number
  calendarId: number
  participantId: number
  _all: number
}


export type CalendarParticipantMinAggregateInputType = {
  id?: true
  calendarId?: true
  participantId?: true
}

export type CalendarParticipantMaxAggregateInputType = {
  id?: true
  calendarId?: true
  participantId?: true
}

export type CalendarParticipantCountAggregateInputType = {
  id?: true
  calendarId?: true
  participantId?: true
  _all?: true
}

export type CalendarParticipantAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CalendarParticipant to aggregate.
   */
  where?: Prisma.CalendarParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CalendarParticipants to fetch.
   */
  orderBy?: Prisma.CalendarParticipantOrderByWithRelationInput | Prisma.CalendarParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CalendarParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CalendarParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CalendarParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CalendarParticipants
  **/
  _count?: true | CalendarParticipantCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CalendarParticipantMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CalendarParticipantMaxAggregateInputType
}

export type GetCalendarParticipantAggregateType<T extends CalendarParticipantAggregateArgs> = {
      [P in keyof T & keyof AggregateCalendarParticipant]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCalendarParticipant[P]>
    : Prisma.GetScalarType<T[P], AggregateCalendarParticipant[P]>
}




export type CalendarParticipantGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CalendarParticipantWhereInput
  orderBy?: Prisma.CalendarParticipantOrderByWithAggregationInput | Prisma.CalendarParticipantOrderByWithAggregationInput[]
  by: Prisma.CalendarParticipantScalarFieldEnum[] | Prisma.CalendarParticipantScalarFieldEnum
  having?: Prisma.CalendarParticipantScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CalendarParticipantCountAggregateInputType | true
  _min?: CalendarParticipantMinAggregateInputType
  _max?: CalendarParticipantMaxAggregateInputType
}

export type CalendarParticipantGroupByOutputType = {
  id: string
  calendarId: string
  participantId: string
  _count: CalendarParticipantCountAggregateOutputType | null
  _min: CalendarParticipantMinAggregateOutputType | null
  _max: CalendarParticipantMaxAggregateOutputType | null
}

type GetCalendarParticipantGroupByPayload<T extends CalendarParticipantGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CalendarParticipantGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CalendarParticipantGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CalendarParticipantGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CalendarParticipantGroupByOutputType[P]>
      }
    >
  >



export type CalendarParticipantWhereInput = {
  AND?: Prisma.CalendarParticipantWhereInput | Prisma.CalendarParticipantWhereInput[]
  OR?: Prisma.CalendarParticipantWhereInput[]
  NOT?: Prisma.CalendarParticipantWhereInput | Prisma.CalendarParticipantWhereInput[]
  id?: Prisma.StringFilter<"CalendarParticipant"> | string
  calendarId?: Prisma.StringFilter<"CalendarParticipant"> | string
  participantId?: Prisma.StringFilter<"CalendarParticipant"> | string
  calendar?: Prisma.XOR<Prisma.CalendarScalarRelationFilter, Prisma.CalendarWhereInput>
  participant?: Prisma.XOR<Prisma.ParticipantScalarRelationFilter, Prisma.ParticipantWhereInput>
}

export type CalendarParticipantOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  calendarId?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
  calendar?: Prisma.CalendarOrderByWithRelationInput
  participant?: Prisma.ParticipantOrderByWithRelationInput
  _relevance?: Prisma.CalendarParticipantOrderByRelevanceInput
}

export type CalendarParticipantWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  calendarId_participantId?: Prisma.CalendarParticipantCalendarIdParticipantIdCompoundUniqueInput
  AND?: Prisma.CalendarParticipantWhereInput | Prisma.CalendarParticipantWhereInput[]
  OR?: Prisma.CalendarParticipantWhereInput[]
  NOT?: Prisma.CalendarParticipantWhereInput | Prisma.CalendarParticipantWhereInput[]
  calendarId?: Prisma.StringFilter<"CalendarParticipant"> | string
  participantId?: Prisma.StringFilter<"CalendarParticipant"> | string
  calendar?: Prisma.XOR<Prisma.CalendarScalarRelationFilter, Prisma.CalendarWhereInput>
  participant?: Prisma.XOR<Prisma.ParticipantScalarRelationFilter, Prisma.ParticipantWhereInput>
}, "id" | "calendarId_participantId">

export type CalendarParticipantOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  calendarId?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
  _count?: Prisma.CalendarParticipantCountOrderByAggregateInput
  _max?: Prisma.CalendarParticipantMaxOrderByAggregateInput
  _min?: Prisma.CalendarParticipantMinOrderByAggregateInput
}

export type CalendarParticipantScalarWhereWithAggregatesInput = {
  AND?: Prisma.CalendarParticipantScalarWhereWithAggregatesInput | Prisma.CalendarParticipantScalarWhereWithAggregatesInput[]
  OR?: Prisma.CalendarParticipantScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CalendarParticipantScalarWhereWithAggregatesInput | Prisma.CalendarParticipantScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"CalendarParticipant"> | string
  calendarId?: Prisma.StringWithAggregatesFilter<"CalendarParticipant"> | string
  participantId?: Prisma.StringWithAggregatesFilter<"CalendarParticipant"> | string
}

export type CalendarParticipantCreateInput = {
  id?: string
  calendar: Prisma.CalendarCreateNestedOneWithoutMembersInput
  participant: Prisma.ParticipantCreateNestedOneWithoutCalendarsInput
}

export type CalendarParticipantUncheckedCreateInput = {
  id?: string
  calendarId: string
  participantId: string
}

export type CalendarParticipantUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  calendar?: Prisma.CalendarUpdateOneRequiredWithoutMembersNestedInput
  participant?: Prisma.ParticipantUpdateOneRequiredWithoutCalendarsNestedInput
}

export type CalendarParticipantUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  calendarId?: Prisma.StringFieldUpdateOperationsInput | string
  participantId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CalendarParticipantCreateManyInput = {
  id?: string
  calendarId: string
  participantId: string
}

export type CalendarParticipantUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CalendarParticipantUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  calendarId?: Prisma.StringFieldUpdateOperationsInput | string
  participantId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CalendarParticipantListRelationFilter = {
  every?: Prisma.CalendarParticipantWhereInput
  some?: Prisma.CalendarParticipantWhereInput
  none?: Prisma.CalendarParticipantWhereInput
}

export type CalendarParticipantOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CalendarParticipantOrderByRelevanceInput = {
  fields: Prisma.CalendarParticipantOrderByRelevanceFieldEnum | Prisma.CalendarParticipantOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type CalendarParticipantCalendarIdParticipantIdCompoundUniqueInput = {
  calendarId: string
  participantId: string
}

export type CalendarParticipantCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  calendarId?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
}

export type CalendarParticipantMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  calendarId?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
}

export type CalendarParticipantMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  calendarId?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
}

export type CalendarParticipantCreateNestedManyWithoutCalendarInput = {
  create?: Prisma.XOR<Prisma.CalendarParticipantCreateWithoutCalendarInput, Prisma.CalendarParticipantUncheckedCreateWithoutCalendarInput> | Prisma.CalendarParticipantCreateWithoutCalendarInput[] | Prisma.CalendarParticipantUncheckedCreateWithoutCalendarInput[]
  connectOrCreate?: Prisma.CalendarParticipantCreateOrConnectWithoutCalendarInput | Prisma.CalendarParticipantCreateOrConnectWithoutCalendarInput[]
  createMany?: Prisma.CalendarParticipantCreateManyCalendarInputEnvelope
  connect?: Prisma.CalendarParticipantWhereUniqueInput | Prisma.CalendarParticipantWhereUniqueInput[]
}

export type CalendarParticipantUncheckedCreateNestedManyWithoutCalendarInput = {
  create?: Prisma.XOR<Prisma.CalendarParticipantCreateWithoutCalendarInput, Prisma.CalendarParticipantUncheckedCreateWithoutCalendarInput> | Prisma.CalendarParticipantCreateWithoutCalendarInput[] | Prisma.CalendarParticipantUncheckedCreateWithoutCalendarInput[]
  connectOrCreate?: Prisma.CalendarParticipantCreateOrConnectWithoutCalendarInput | Prisma.CalendarParticipantCreateOrConnectWithoutCalendarInput[]
  createMany?: Prisma.CalendarParticipantCreateManyCalendarInputEnvelope
  connect?: Prisma.CalendarParticipantWhereUniqueInput | Prisma.CalendarParticipantWhereUniqueInput[]
}

export type CalendarParticipantUpdateManyWithoutCalendarNestedInput = {
  create?: Prisma.XOR<Prisma.CalendarParticipantCreateWithoutCalendarInput, Prisma.CalendarParticipantUncheckedCreateWithoutCalendarInput> | Prisma.CalendarParticipantCreateWithoutCalendarInput[] | Prisma.CalendarParticipantUncheckedCreateWithoutCalendarInput[]
  connectOrCreate?: Prisma.CalendarParticipantCreateOrConnectWithoutCalendarInput | Prisma.CalendarParticipantCreateOrConnectWithoutCalendarInput[]
  upsert?: Prisma.CalendarParticipantUpsertWithWhereUniqueWithoutCalendarInput | Prisma.CalendarParticipantUpsertWithWhereUniqueWithoutCalendarInput[]
  createMany?: Prisma.CalendarParticipantCreateManyCalendarInputEnvelope
  set?: Prisma.CalendarParticipantWhereUniqueInput | Prisma.CalendarParticipantWhereUniqueInput[]
  disconnect?: Prisma.CalendarParticipantWhereUniqueInput | Prisma.CalendarParticipantWhereUniqueInput[]
  delete?: Prisma.CalendarParticipantWhereUniqueInput | Prisma.CalendarParticipantWhereUniqueInput[]
  connect?: Prisma.CalendarParticipantWhereUniqueInput | Prisma.CalendarParticipantWhereUniqueInput[]
  update?: Prisma.CalendarParticipantUpdateWithWhereUniqueWithoutCalendarInput | Prisma.CalendarParticipantUpdateWithWhereUniqueWithoutCalendarInput[]
  updateMany?: Prisma.CalendarParticipantUpdateManyWithWhereWithoutCalendarInput | Prisma.CalendarParticipantUpdateManyWithWhereWithoutCalendarInput[]
  deleteMany?: Prisma.CalendarParticipantScalarWhereInput | Prisma.CalendarParticipantScalarWhereInput[]
}

export type CalendarParticipantUncheckedUpdateManyWithoutCalendarNestedInput = {
  create?: Prisma.XOR<Prisma.CalendarParticipantCreateWithoutCalendarInput, Prisma.CalendarParticipantUncheckedCreateWithoutCalendarInput> | Prisma.CalendarParticipantCreateWithoutCalendarInput[] | Prisma.CalendarParticipantUncheckedCreateWithoutCalendarInput[]
  connectOrCreate?: Prisma.CalendarParticipantCreateOrConnectWithoutCalendarInput | Prisma.CalendarParticipantCreateOrConnectWithoutCalendarInput[]
  upsert?: Prisma.CalendarParticipantUpsertWithWhereUniqueWithoutCalendarInput | Prisma.CalendarParticipantUpsertWithWhereUniqueWithoutCalendarInput[]
  createMany?: Prisma.CalendarParticipantCreateManyCalendarInputEnvelope
  set?: Prisma.CalendarParticipantWhereUniqueInput | Prisma.CalendarParticipantWhereUniqueInput[]
  disconnect?: Prisma.CalendarParticipantWhereUniqueInput | Prisma.CalendarParticipantWhereUniqueInput[]
  delete?: Prisma.CalendarParticipantWhereUniqueInput | Prisma.CalendarParticipantWhereUniqueInput[]
  connect?: Prisma.CalendarParticipantWhereUniqueInput | Prisma.CalendarParticipantWhereUniqueInput[]
  update?: Prisma.CalendarParticipantUpdateWithWhereUniqueWithoutCalendarInput | Prisma.CalendarParticipantUpdateWithWhereUniqueWithoutCalendarInput[]
  updateMany?: Prisma.CalendarParticipantUpdateManyWithWhereWithoutCalendarInput | Prisma.CalendarParticipantUpdateManyWithWhereWithoutCalendarInput[]
  deleteMany?: Prisma.CalendarParticipantScalarWhereInput | Prisma.CalendarParticipantScalarWhereInput[]
}

export type CalendarParticipantCreateNestedManyWithoutParticipantInput = {
  create?: Prisma.XOR<Prisma.CalendarParticipantCreateWithoutParticipantInput, Prisma.CalendarParticipantUncheckedCreateWithoutParticipantInput> | Prisma.CalendarParticipantCreateWithoutParticipantInput[] | Prisma.CalendarParticipantUncheckedCreateWithoutParticipantInput[]
  connectOrCreate?: Prisma.CalendarParticipantCreateOrConnectWithoutParticipantInput | Prisma.CalendarParticipantCreateOrConnectWithoutParticipantInput[]
  createMany?: Prisma.CalendarParticipantCreateManyParticipantInputEnvelope
  connect?: Prisma.CalendarParticipantWhereUniqueInput | Prisma.CalendarParticipantWhereUniqueInput[]
}

export type CalendarParticipantUncheckedCreateNestedManyWithoutParticipantInput = {
  create?: Prisma.XOR<Prisma.CalendarParticipantCreateWithoutParticipantInput, Prisma.CalendarParticipantUncheckedCreateWithoutParticipantInput> | Prisma.CalendarParticipantCreateWithoutParticipantInput[] | Prisma.CalendarParticipantUncheckedCreateWithoutParticipantInput[]
  connectOrCreate?: Prisma.CalendarParticipantCreateOrConnectWithoutParticipantInput | Prisma.CalendarParticipantCreateOrConnectWithoutParticipantInput[]
  createMany?: Prisma.CalendarParticipantCreateManyParticipantInputEnvelope
  connect?: Prisma.CalendarParticipantWhereUniqueInput | Prisma.CalendarParticipantWhereUniqueInput[]
}

export type CalendarParticipantUpdateManyWithoutParticipantNestedInput = {
  create?: Prisma.XOR<Prisma.CalendarParticipantCreateWithoutParticipantInput, Prisma.CalendarParticipantUncheckedCreateWithoutParticipantInput> | Prisma.CalendarParticipantCreateWithoutParticipantInput[] | Prisma.CalendarParticipantUncheckedCreateWithoutParticipantInput[]
  connectOrCreate?: Prisma.CalendarParticipantCreateOrConnectWithoutParticipantInput | Prisma.CalendarParticipantCreateOrConnectWithoutParticipantInput[]
  upsert?: Prisma.CalendarParticipantUpsertWithWhereUniqueWithoutParticipantInput | Prisma.CalendarParticipantUpsertWithWhereUniqueWithoutParticipantInput[]
  createMany?: Prisma.CalendarParticipantCreateManyParticipantInputEnvelope
  set?: Prisma.CalendarParticipantWhereUniqueInput | Prisma.CalendarParticipantWhereUniqueInput[]
  disconnect?: Prisma.CalendarParticipantWhereUniqueInput | Prisma.CalendarParticipantWhereUniqueInput[]
  delete?: Prisma.CalendarParticipantWhereUniqueInput | Prisma.CalendarParticipantWhereUniqueInput[]
  connect?: Prisma.CalendarParticipantWhereUniqueInput | Prisma.CalendarParticipantWhereUniqueInput[]
  update?: Prisma.CalendarParticipantUpdateWithWhereUniqueWithoutParticipantInput | Prisma.CalendarParticipantUpdateWithWhereUniqueWithoutParticipantInput[]
  updateMany?: Prisma.CalendarParticipantUpdateManyWithWhereWithoutParticipantInput | Prisma.CalendarParticipantUpdateManyWithWhereWithoutParticipantInput[]
  deleteMany?: Prisma.CalendarParticipantScalarWhereInput | Prisma.CalendarParticipantScalarWhereInput[]
}

export type CalendarParticipantUncheckedUpdateManyWithoutParticipantNestedInput = {
  create?: Prisma.XOR<Prisma.CalendarParticipantCreateWithoutParticipantInput, Prisma.CalendarParticipantUncheckedCreateWithoutParticipantInput> | Prisma.CalendarParticipantCreateWithoutParticipantInput[] | Prisma.CalendarParticipantUncheckedCreateWithoutParticipantInput[]
  connectOrCreate?: Prisma.CalendarParticipantCreateOrConnectWithoutParticipantInput | Prisma.CalendarParticipantCreateOrConnectWithoutParticipantInput[]
  upsert?: Prisma.CalendarParticipantUpsertWithWhereUniqueWithoutParticipantInput | Prisma.CalendarParticipantUpsertWithWhereUniqueWithoutParticipantInput[]
  createMany?: Prisma.CalendarParticipantCreateManyParticipantInputEnvelope
  set?: Prisma.CalendarParticipantWhereUniqueInput | Prisma.CalendarParticipantWhereUniqueInput[]
  disconnect?: Prisma.CalendarParticipantWhereUniqueInput | Prisma.CalendarParticipantWhereUniqueInput[]
  delete?: Prisma.CalendarParticipantWhereUniqueInput | Prisma.CalendarParticipantWhereUniqueInput[]
  connect?: Prisma.CalendarParticipantWhereUniqueInput | Prisma.CalendarParticipantWhereUniqueInput[]
  update?: Prisma.CalendarParticipantUpdateWithWhereUniqueWithoutParticipantInput | Prisma.CalendarParticipantUpdateWithWhereUniqueWithoutParticipantInput[]
  updateMany?: Prisma.CalendarParticipantUpdateManyWithWhereWithoutParticipantInput | Prisma.CalendarParticipantUpdateManyWithWhereWithoutParticipantInput[]
  deleteMany?: Prisma.CalendarParticipantScalarWhereInput | Prisma.CalendarParticipantScalarWhereInput[]
}

export type CalendarParticipantCreateWithoutCalendarInput = {
  id?: string
  participant: Prisma.ParticipantCreateNestedOneWithoutCalendarsInput
}

export type CalendarParticipantUncheckedCreateWithoutCalendarInput = {
  id?: string
  participantId: string
}

export type CalendarParticipantCreateOrConnectWithoutCalendarInput = {
  where: Prisma.CalendarParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.CalendarParticipantCreateWithoutCalendarInput, Prisma.CalendarParticipantUncheckedCreateWithoutCalendarInput>
}

export type CalendarParticipantCreateManyCalendarInputEnvelope = {
  data: Prisma.CalendarParticipantCreateManyCalendarInput | Prisma.CalendarParticipantCreateManyCalendarInput[]
  skipDuplicates?: boolean
}

export type CalendarParticipantUpsertWithWhereUniqueWithoutCalendarInput = {
  where: Prisma.CalendarParticipantWhereUniqueInput
  update: Prisma.XOR<Prisma.CalendarParticipantUpdateWithoutCalendarInput, Prisma.CalendarParticipantUncheckedUpdateWithoutCalendarInput>
  create: Prisma.XOR<Prisma.CalendarParticipantCreateWithoutCalendarInput, Prisma.CalendarParticipantUncheckedCreateWithoutCalendarInput>
}

export type CalendarParticipantUpdateWithWhereUniqueWithoutCalendarInput = {
  where: Prisma.CalendarParticipantWhereUniqueInput
  data: Prisma.XOR<Prisma.CalendarParticipantUpdateWithoutCalendarInput, Prisma.CalendarParticipantUncheckedUpdateWithoutCalendarInput>
}

export type CalendarParticipantUpdateManyWithWhereWithoutCalendarInput = {
  where: Prisma.CalendarParticipantScalarWhereInput
  data: Prisma.XOR<Prisma.CalendarParticipantUpdateManyMutationInput, Prisma.CalendarParticipantUncheckedUpdateManyWithoutCalendarInput>
}

export type CalendarParticipantScalarWhereInput = {
  AND?: Prisma.CalendarParticipantScalarWhereInput | Prisma.CalendarParticipantScalarWhereInput[]
  OR?: Prisma.CalendarParticipantScalarWhereInput[]
  NOT?: Prisma.CalendarParticipantScalarWhereInput | Prisma.CalendarParticipantScalarWhereInput[]
  id?: Prisma.StringFilter<"CalendarParticipant"> | string
  calendarId?: Prisma.StringFilter<"CalendarParticipant"> | string
  participantId?: Prisma.StringFilter<"CalendarParticipant"> | string
}

export type CalendarParticipantCreateWithoutParticipantInput = {
  id?: string
  calendar: Prisma.CalendarCreateNestedOneWithoutMembersInput
}

export type CalendarParticipantUncheckedCreateWithoutParticipantInput = {
  id?: string
  calendarId: string
}

export type CalendarParticipantCreateOrConnectWithoutParticipantInput = {
  where: Prisma.CalendarParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.CalendarParticipantCreateWithoutParticipantInput, Prisma.CalendarParticipantUncheckedCreateWithoutParticipantInput>
}

export type CalendarParticipantCreateManyParticipantInputEnvelope = {
  data: Prisma.CalendarParticipantCreateManyParticipantInput | Prisma.CalendarParticipantCreateManyParticipantInput[]
  skipDuplicates?: boolean
}

export type CalendarParticipantUpsertWithWhereUniqueWithoutParticipantInput = {
  where: Prisma.CalendarParticipantWhereUniqueInput
  update: Prisma.XOR<Prisma.CalendarParticipantUpdateWithoutParticipantInput, Prisma.CalendarParticipantUncheckedUpdateWithoutParticipantInput>
  create: Prisma.XOR<Prisma.CalendarParticipantCreateWithoutParticipantInput, Prisma.CalendarParticipantUncheckedCreateWithoutParticipantInput>
}

export type CalendarParticipantUpdateWithWhereUniqueWithoutParticipantInput = {
  where: Prisma.CalendarParticipantWhereUniqueInput
  data: Prisma.XOR<Prisma.CalendarParticipantUpdateWithoutParticipantInput, Prisma.CalendarParticipantUncheckedUpdateWithoutParticipantInput>
}

export type CalendarParticipantUpdateManyWithWhereWithoutParticipantInput = {
  where: Prisma.CalendarParticipantScalarWhereInput
  data: Prisma.XOR<Prisma.CalendarParticipantUpdateManyMutationInput, Prisma.CalendarParticipantUncheckedUpdateManyWithoutParticipantInput>
}

export type CalendarParticipantCreateManyCalendarInput = {
  id?: string
  participantId: string
}

export type CalendarParticipantUpdateWithoutCalendarInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  participant?: Prisma.ParticipantUpdateOneRequiredWithoutCalendarsNestedInput
}

export type CalendarParticipantUncheckedUpdateWithoutCalendarInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  participantId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CalendarParticipantUncheckedUpdateManyWithoutCalendarInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  participantId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CalendarParticipantCreateManyParticipantInput = {
  id?: string
  calendarId: string
}

export type CalendarParticipantUpdateWithoutParticipantInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  calendar?: Prisma.CalendarUpdateOneRequiredWithoutMembersNestedInput
}

export type CalendarParticipantUncheckedUpdateWithoutParticipantInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  calendarId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CalendarParticipantUncheckedUpdateManyWithoutParticipantInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  calendarId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type CalendarParticipantSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  calendarId?: boolean
  participantId?: boolean
  calendar?: boolean | Prisma.CalendarDefaultArgs<ExtArgs>
  participant?: boolean | Prisma.ParticipantDefaultArgs<ExtArgs>
}, ExtArgs["result"]["calendarParticipant"]>



export type CalendarParticipantSelectScalar = {
  id?: boolean
  calendarId?: boolean
  participantId?: boolean
}

export type CalendarParticipantOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "calendarId" | "participantId", ExtArgs["result"]["calendarParticipant"]>
export type CalendarParticipantInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  calendar?: boolean | Prisma.CalendarDefaultArgs<ExtArgs>
  participant?: boolean | Prisma.ParticipantDefaultArgs<ExtArgs>
}

export type $CalendarParticipantPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CalendarParticipant"
  objects: {
    calendar: Prisma.$CalendarPayload<ExtArgs>
    participant: Prisma.$ParticipantPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    calendarId: string
    participantId: string
  }, ExtArgs["result"]["calendarParticipant"]>
  composites: {}
}

export type CalendarParticipantGetPayload<S extends boolean | null | undefined | CalendarParticipantDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CalendarParticipantPayload, S>

export type CalendarParticipantCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CalendarParticipantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CalendarParticipantCountAggregateInputType | true
  }

export interface CalendarParticipantDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CalendarParticipant'], meta: { name: 'CalendarParticipant' } }
  /**
   * Find zero or one CalendarParticipant that matches the filter.
   * @param {CalendarParticipantFindUniqueArgs} args - Arguments to find a CalendarParticipant
   * @example
   * // Get one CalendarParticipant
   * const calendarParticipant = await prisma.calendarParticipant.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CalendarParticipantFindUniqueArgs>(args: Prisma.SelectSubset<T, CalendarParticipantFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CalendarParticipantClient<runtime.Types.Result.GetResult<Prisma.$CalendarParticipantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CalendarParticipant that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CalendarParticipantFindUniqueOrThrowArgs} args - Arguments to find a CalendarParticipant
   * @example
   * // Get one CalendarParticipant
   * const calendarParticipant = await prisma.calendarParticipant.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CalendarParticipantFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CalendarParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CalendarParticipantClient<runtime.Types.Result.GetResult<Prisma.$CalendarParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CalendarParticipant that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarParticipantFindFirstArgs} args - Arguments to find a CalendarParticipant
   * @example
   * // Get one CalendarParticipant
   * const calendarParticipant = await prisma.calendarParticipant.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CalendarParticipantFindFirstArgs>(args?: Prisma.SelectSubset<T, CalendarParticipantFindFirstArgs<ExtArgs>>): Prisma.Prisma__CalendarParticipantClient<runtime.Types.Result.GetResult<Prisma.$CalendarParticipantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CalendarParticipant that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarParticipantFindFirstOrThrowArgs} args - Arguments to find a CalendarParticipant
   * @example
   * // Get one CalendarParticipant
   * const calendarParticipant = await prisma.calendarParticipant.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CalendarParticipantFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CalendarParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CalendarParticipantClient<runtime.Types.Result.GetResult<Prisma.$CalendarParticipantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CalendarParticipants that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CalendarParticipants
   * const calendarParticipants = await prisma.calendarParticipant.findMany()
   * 
   * // Get first 10 CalendarParticipants
   * const calendarParticipants = await prisma.calendarParticipant.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const calendarParticipantWithIdOnly = await prisma.calendarParticipant.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CalendarParticipantFindManyArgs>(args?: Prisma.SelectSubset<T, CalendarParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CalendarParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CalendarParticipant.
   * @param {CalendarParticipantCreateArgs} args - Arguments to create a CalendarParticipant.
   * @example
   * // Create one CalendarParticipant
   * const CalendarParticipant = await prisma.calendarParticipant.create({
   *   data: {
   *     // ... data to create a CalendarParticipant
   *   }
   * })
   * 
   */
  create<T extends CalendarParticipantCreateArgs>(args: Prisma.SelectSubset<T, CalendarParticipantCreateArgs<ExtArgs>>): Prisma.Prisma__CalendarParticipantClient<runtime.Types.Result.GetResult<Prisma.$CalendarParticipantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CalendarParticipants.
   * @param {CalendarParticipantCreateManyArgs} args - Arguments to create many CalendarParticipants.
   * @example
   * // Create many CalendarParticipants
   * const calendarParticipant = await prisma.calendarParticipant.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CalendarParticipantCreateManyArgs>(args?: Prisma.SelectSubset<T, CalendarParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a CalendarParticipant.
   * @param {CalendarParticipantDeleteArgs} args - Arguments to delete one CalendarParticipant.
   * @example
   * // Delete one CalendarParticipant
   * const CalendarParticipant = await prisma.calendarParticipant.delete({
   *   where: {
   *     // ... filter to delete one CalendarParticipant
   *   }
   * })
   * 
   */
  delete<T extends CalendarParticipantDeleteArgs>(args: Prisma.SelectSubset<T, CalendarParticipantDeleteArgs<ExtArgs>>): Prisma.Prisma__CalendarParticipantClient<runtime.Types.Result.GetResult<Prisma.$CalendarParticipantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CalendarParticipant.
   * @param {CalendarParticipantUpdateArgs} args - Arguments to update one CalendarParticipant.
   * @example
   * // Update one CalendarParticipant
   * const calendarParticipant = await prisma.calendarParticipant.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CalendarParticipantUpdateArgs>(args: Prisma.SelectSubset<T, CalendarParticipantUpdateArgs<ExtArgs>>): Prisma.Prisma__CalendarParticipantClient<runtime.Types.Result.GetResult<Prisma.$CalendarParticipantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CalendarParticipants.
   * @param {CalendarParticipantDeleteManyArgs} args - Arguments to filter CalendarParticipants to delete.
   * @example
   * // Delete a few CalendarParticipants
   * const { count } = await prisma.calendarParticipant.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CalendarParticipantDeleteManyArgs>(args?: Prisma.SelectSubset<T, CalendarParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CalendarParticipants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarParticipantUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CalendarParticipants
   * const calendarParticipant = await prisma.calendarParticipant.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CalendarParticipantUpdateManyArgs>(args: Prisma.SelectSubset<T, CalendarParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one CalendarParticipant.
   * @param {CalendarParticipantUpsertArgs} args - Arguments to update or create a CalendarParticipant.
   * @example
   * // Update or create a CalendarParticipant
   * const calendarParticipant = await prisma.calendarParticipant.upsert({
   *   create: {
   *     // ... data to create a CalendarParticipant
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CalendarParticipant we want to update
   *   }
   * })
   */
  upsert<T extends CalendarParticipantUpsertArgs>(args: Prisma.SelectSubset<T, CalendarParticipantUpsertArgs<ExtArgs>>): Prisma.Prisma__CalendarParticipantClient<runtime.Types.Result.GetResult<Prisma.$CalendarParticipantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CalendarParticipants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarParticipantCountArgs} args - Arguments to filter CalendarParticipants to count.
   * @example
   * // Count the number of CalendarParticipants
   * const count = await prisma.calendarParticipant.count({
   *   where: {
   *     // ... the filter for the CalendarParticipants we want to count
   *   }
   * })
  **/
  count<T extends CalendarParticipantCountArgs>(
    args?: Prisma.Subset<T, CalendarParticipantCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CalendarParticipantCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CalendarParticipant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CalendarParticipantAggregateArgs>(args: Prisma.Subset<T, CalendarParticipantAggregateArgs>): Prisma.PrismaPromise<GetCalendarParticipantAggregateType<T>>

  /**
   * Group by CalendarParticipant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarParticipantGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CalendarParticipantGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CalendarParticipantGroupByArgs['orderBy'] }
      : { orderBy?: CalendarParticipantGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CalendarParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCalendarParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CalendarParticipant model
 */
readonly fields: CalendarParticipantFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CalendarParticipant.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CalendarParticipantClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  calendar<T extends Prisma.CalendarDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CalendarDefaultArgs<ExtArgs>>): Prisma.Prisma__CalendarClient<runtime.Types.Result.GetResult<Prisma.$CalendarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  participant<T extends Prisma.ParticipantDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ParticipantDefaultArgs<ExtArgs>>): Prisma.Prisma__ParticipantClient<runtime.Types.Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CalendarParticipant model
 */
export interface CalendarParticipantFieldRefs {
  readonly id: Prisma.FieldRef<"CalendarParticipant", 'String'>
  readonly calendarId: Prisma.FieldRef<"CalendarParticipant", 'String'>
  readonly participantId: Prisma.FieldRef<"CalendarParticipant", 'String'>
}
    

// Custom InputTypes
/**
 * CalendarParticipant findUnique
 */
export type CalendarParticipantFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CalendarParticipant
   */
  select?: Prisma.CalendarParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CalendarParticipant
   */
  omit?: Prisma.CalendarParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarParticipantInclude<ExtArgs> | null
  /**
   * Filter, which CalendarParticipant to fetch.
   */
  where: Prisma.CalendarParticipantWhereUniqueInput
}

/**
 * CalendarParticipant findUniqueOrThrow
 */
export type CalendarParticipantFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CalendarParticipant
   */
  select?: Prisma.CalendarParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CalendarParticipant
   */
  omit?: Prisma.CalendarParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarParticipantInclude<ExtArgs> | null
  /**
   * Filter, which CalendarParticipant to fetch.
   */
  where: Prisma.CalendarParticipantWhereUniqueInput
}

/**
 * CalendarParticipant findFirst
 */
export type CalendarParticipantFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CalendarParticipant
   */
  select?: Prisma.CalendarParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CalendarParticipant
   */
  omit?: Prisma.CalendarParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarParticipantInclude<ExtArgs> | null
  /**
   * Filter, which CalendarParticipant to fetch.
   */
  where?: Prisma.CalendarParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CalendarParticipants to fetch.
   */
  orderBy?: Prisma.CalendarParticipantOrderByWithRelationInput | Prisma.CalendarParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CalendarParticipants.
   */
  cursor?: Prisma.CalendarParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CalendarParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CalendarParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CalendarParticipants.
   */
  distinct?: Prisma.CalendarParticipantScalarFieldEnum | Prisma.CalendarParticipantScalarFieldEnum[]
}

/**
 * CalendarParticipant findFirstOrThrow
 */
export type CalendarParticipantFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CalendarParticipant
   */
  select?: Prisma.CalendarParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CalendarParticipant
   */
  omit?: Prisma.CalendarParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarParticipantInclude<ExtArgs> | null
  /**
   * Filter, which CalendarParticipant to fetch.
   */
  where?: Prisma.CalendarParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CalendarParticipants to fetch.
   */
  orderBy?: Prisma.CalendarParticipantOrderByWithRelationInput | Prisma.CalendarParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CalendarParticipants.
   */
  cursor?: Prisma.CalendarParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CalendarParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CalendarParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CalendarParticipants.
   */
  distinct?: Prisma.CalendarParticipantScalarFieldEnum | Prisma.CalendarParticipantScalarFieldEnum[]
}

/**
 * CalendarParticipant findMany
 */
export type CalendarParticipantFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CalendarParticipant
   */
  select?: Prisma.CalendarParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CalendarParticipant
   */
  omit?: Prisma.CalendarParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarParticipantInclude<ExtArgs> | null
  /**
   * Filter, which CalendarParticipants to fetch.
   */
  where?: Prisma.CalendarParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CalendarParticipants to fetch.
   */
  orderBy?: Prisma.CalendarParticipantOrderByWithRelationInput | Prisma.CalendarParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CalendarParticipants.
   */
  cursor?: Prisma.CalendarParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CalendarParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CalendarParticipants.
   */
  skip?: number
  distinct?: Prisma.CalendarParticipantScalarFieldEnum | Prisma.CalendarParticipantScalarFieldEnum[]
}

/**
 * CalendarParticipant create
 */
export type CalendarParticipantCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CalendarParticipant
   */
  select?: Prisma.CalendarParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CalendarParticipant
   */
  omit?: Prisma.CalendarParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarParticipantInclude<ExtArgs> | null
  /**
   * The data needed to create a CalendarParticipant.
   */
  data: Prisma.XOR<Prisma.CalendarParticipantCreateInput, Prisma.CalendarParticipantUncheckedCreateInput>
}

/**
 * CalendarParticipant createMany
 */
export type CalendarParticipantCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CalendarParticipants.
   */
  data: Prisma.CalendarParticipantCreateManyInput | Prisma.CalendarParticipantCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CalendarParticipant update
 */
export type CalendarParticipantUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CalendarParticipant
   */
  select?: Prisma.CalendarParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CalendarParticipant
   */
  omit?: Prisma.CalendarParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarParticipantInclude<ExtArgs> | null
  /**
   * The data needed to update a CalendarParticipant.
   */
  data: Prisma.XOR<Prisma.CalendarParticipantUpdateInput, Prisma.CalendarParticipantUncheckedUpdateInput>
  /**
   * Choose, which CalendarParticipant to update.
   */
  where: Prisma.CalendarParticipantWhereUniqueInput
}

/**
 * CalendarParticipant updateMany
 */
export type CalendarParticipantUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CalendarParticipants.
   */
  data: Prisma.XOR<Prisma.CalendarParticipantUpdateManyMutationInput, Prisma.CalendarParticipantUncheckedUpdateManyInput>
  /**
   * Filter which CalendarParticipants to update
   */
  where?: Prisma.CalendarParticipantWhereInput
  /**
   * Limit how many CalendarParticipants to update.
   */
  limit?: number
}

/**
 * CalendarParticipant upsert
 */
export type CalendarParticipantUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CalendarParticipant
   */
  select?: Prisma.CalendarParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CalendarParticipant
   */
  omit?: Prisma.CalendarParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarParticipantInclude<ExtArgs> | null
  /**
   * The filter to search for the CalendarParticipant to update in case it exists.
   */
  where: Prisma.CalendarParticipantWhereUniqueInput
  /**
   * In case the CalendarParticipant found by the `where` argument doesn't exist, create a new CalendarParticipant with this data.
   */
  create: Prisma.XOR<Prisma.CalendarParticipantCreateInput, Prisma.CalendarParticipantUncheckedCreateInput>
  /**
   * In case the CalendarParticipant was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CalendarParticipantUpdateInput, Prisma.CalendarParticipantUncheckedUpdateInput>
}

/**
 * CalendarParticipant delete
 */
export type CalendarParticipantDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CalendarParticipant
   */
  select?: Prisma.CalendarParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CalendarParticipant
   */
  omit?: Prisma.CalendarParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarParticipantInclude<ExtArgs> | null
  /**
   * Filter which CalendarParticipant to delete.
   */
  where: Prisma.CalendarParticipantWhereUniqueInput
}

/**
 * CalendarParticipant deleteMany
 */
export type CalendarParticipantDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CalendarParticipants to delete
   */
  where?: Prisma.CalendarParticipantWhereInput
  /**
   * Limit how many CalendarParticipants to delete.
   */
  limit?: number
}

/**
 * CalendarParticipant without action
 */
export type CalendarParticipantDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CalendarParticipant
   */
  select?: Prisma.CalendarParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CalendarParticipant
   */
  omit?: Prisma.CalendarParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarParticipantInclude<ExtArgs> | null
}
