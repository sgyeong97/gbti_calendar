
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Calendar` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Calendar
 * 
 */
export type CalendarModel = runtime.Types.Result.DefaultSelection<Prisma.$CalendarPayload>

export type AggregateCalendar = {
  _count: CalendarCountAggregateOutputType | null
  _min: CalendarMinAggregateOutputType | null
  _max: CalendarMaxAggregateOutputType | null
}

export type CalendarMinAggregateOutputType = {
  id: string | null
  name: string | null
  color: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CalendarMaxAggregateOutputType = {
  id: string | null
  name: string | null
  color: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CalendarCountAggregateOutputType = {
  id: number
  name: number
  color: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type CalendarMinAggregateInputType = {
  id?: true
  name?: true
  color?: true
  createdAt?: true
  updatedAt?: true
}

export type CalendarMaxAggregateInputType = {
  id?: true
  name?: true
  color?: true
  createdAt?: true
  updatedAt?: true
}

export type CalendarCountAggregateInputType = {
  id?: true
  name?: true
  color?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type CalendarAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Calendar to aggregate.
   */
  where?: Prisma.CalendarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Calendars to fetch.
   */
  orderBy?: Prisma.CalendarOrderByWithRelationInput | Prisma.CalendarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CalendarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Calendars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Calendars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Calendars
  **/
  _count?: true | CalendarCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CalendarMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CalendarMaxAggregateInputType
}

export type GetCalendarAggregateType<T extends CalendarAggregateArgs> = {
      [P in keyof T & keyof AggregateCalendar]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCalendar[P]>
    : Prisma.GetScalarType<T[P], AggregateCalendar[P]>
}




export type CalendarGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CalendarWhereInput
  orderBy?: Prisma.CalendarOrderByWithAggregationInput | Prisma.CalendarOrderByWithAggregationInput[]
  by: Prisma.CalendarScalarFieldEnum[] | Prisma.CalendarScalarFieldEnum
  having?: Prisma.CalendarScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CalendarCountAggregateInputType | true
  _min?: CalendarMinAggregateInputType
  _max?: CalendarMaxAggregateInputType
}

export type CalendarGroupByOutputType = {
  id: string
  name: string
  color: string
  createdAt: Date
  updatedAt: Date
  _count: CalendarCountAggregateOutputType | null
  _min: CalendarMinAggregateOutputType | null
  _max: CalendarMaxAggregateOutputType | null
}

type GetCalendarGroupByPayload<T extends CalendarGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CalendarGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CalendarGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CalendarGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CalendarGroupByOutputType[P]>
      }
    >
  >



export type CalendarWhereInput = {
  AND?: Prisma.CalendarWhereInput | Prisma.CalendarWhereInput[]
  OR?: Prisma.CalendarWhereInput[]
  NOT?: Prisma.CalendarWhereInput | Prisma.CalendarWhereInput[]
  id?: Prisma.StringFilter<"Calendar"> | string
  name?: Prisma.StringFilter<"Calendar"> | string
  color?: Prisma.StringFilter<"Calendar"> | string
  createdAt?: Prisma.DateTimeFilter<"Calendar"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Calendar"> | Date | string
  events?: Prisma.EventListRelationFilter
  members?: Prisma.CalendarParticipantListRelationFilter
  recurringSlots?: Prisma.RecurringSlotListRelationFilter
}

export type CalendarOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  color?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  events?: Prisma.EventOrderByRelationAggregateInput
  members?: Prisma.CalendarParticipantOrderByRelationAggregateInput
  recurringSlots?: Prisma.RecurringSlotOrderByRelationAggregateInput
  _relevance?: Prisma.CalendarOrderByRelevanceInput
}

export type CalendarWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CalendarWhereInput | Prisma.CalendarWhereInput[]
  OR?: Prisma.CalendarWhereInput[]
  NOT?: Prisma.CalendarWhereInput | Prisma.CalendarWhereInput[]
  name?: Prisma.StringFilter<"Calendar"> | string
  color?: Prisma.StringFilter<"Calendar"> | string
  createdAt?: Prisma.DateTimeFilter<"Calendar"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Calendar"> | Date | string
  events?: Prisma.EventListRelationFilter
  members?: Prisma.CalendarParticipantListRelationFilter
  recurringSlots?: Prisma.RecurringSlotListRelationFilter
}, "id">

export type CalendarOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  color?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.CalendarCountOrderByAggregateInput
  _max?: Prisma.CalendarMaxOrderByAggregateInput
  _min?: Prisma.CalendarMinOrderByAggregateInput
}

export type CalendarScalarWhereWithAggregatesInput = {
  AND?: Prisma.CalendarScalarWhereWithAggregatesInput | Prisma.CalendarScalarWhereWithAggregatesInput[]
  OR?: Prisma.CalendarScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CalendarScalarWhereWithAggregatesInput | Prisma.CalendarScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Calendar"> | string
  name?: Prisma.StringWithAggregatesFilter<"Calendar"> | string
  color?: Prisma.StringWithAggregatesFilter<"Calendar"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Calendar"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Calendar"> | Date | string
}

export type CalendarCreateInput = {
  id?: string
  name: string
  color?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  events?: Prisma.EventCreateNestedManyWithoutCalendarInput
  members?: Prisma.CalendarParticipantCreateNestedManyWithoutCalendarInput
  recurringSlots?: Prisma.RecurringSlotCreateNestedManyWithoutCalendarInput
}

export type CalendarUncheckedCreateInput = {
  id?: string
  name: string
  color?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  events?: Prisma.EventUncheckedCreateNestedManyWithoutCalendarInput
  members?: Prisma.CalendarParticipantUncheckedCreateNestedManyWithoutCalendarInput
  recurringSlots?: Prisma.RecurringSlotUncheckedCreateNestedManyWithoutCalendarInput
}

export type CalendarUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  events?: Prisma.EventUpdateManyWithoutCalendarNestedInput
  members?: Prisma.CalendarParticipantUpdateManyWithoutCalendarNestedInput
  recurringSlots?: Prisma.RecurringSlotUpdateManyWithoutCalendarNestedInput
}

export type CalendarUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  events?: Prisma.EventUncheckedUpdateManyWithoutCalendarNestedInput
  members?: Prisma.CalendarParticipantUncheckedUpdateManyWithoutCalendarNestedInput
  recurringSlots?: Prisma.RecurringSlotUncheckedUpdateManyWithoutCalendarNestedInput
}

export type CalendarCreateManyInput = {
  id?: string
  name: string
  color?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CalendarUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CalendarUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CalendarOrderByRelevanceInput = {
  fields: Prisma.CalendarOrderByRelevanceFieldEnum | Prisma.CalendarOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type CalendarCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  color?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CalendarMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  color?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CalendarMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  color?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CalendarScalarRelationFilter = {
  is?: Prisma.CalendarWhereInput
  isNot?: Prisma.CalendarWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type CalendarCreateNestedOneWithoutEventsInput = {
  create?: Prisma.XOR<Prisma.CalendarCreateWithoutEventsInput, Prisma.CalendarUncheckedCreateWithoutEventsInput>
  connectOrCreate?: Prisma.CalendarCreateOrConnectWithoutEventsInput
  connect?: Prisma.CalendarWhereUniqueInput
}

export type CalendarUpdateOneRequiredWithoutEventsNestedInput = {
  create?: Prisma.XOR<Prisma.CalendarCreateWithoutEventsInput, Prisma.CalendarUncheckedCreateWithoutEventsInput>
  connectOrCreate?: Prisma.CalendarCreateOrConnectWithoutEventsInput
  upsert?: Prisma.CalendarUpsertWithoutEventsInput
  connect?: Prisma.CalendarWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CalendarUpdateToOneWithWhereWithoutEventsInput, Prisma.CalendarUpdateWithoutEventsInput>, Prisma.CalendarUncheckedUpdateWithoutEventsInput>
}

export type CalendarCreateNestedOneWithoutMembersInput = {
  create?: Prisma.XOR<Prisma.CalendarCreateWithoutMembersInput, Prisma.CalendarUncheckedCreateWithoutMembersInput>
  connectOrCreate?: Prisma.CalendarCreateOrConnectWithoutMembersInput
  connect?: Prisma.CalendarWhereUniqueInput
}

export type CalendarUpdateOneRequiredWithoutMembersNestedInput = {
  create?: Prisma.XOR<Prisma.CalendarCreateWithoutMembersInput, Prisma.CalendarUncheckedCreateWithoutMembersInput>
  connectOrCreate?: Prisma.CalendarCreateOrConnectWithoutMembersInput
  upsert?: Prisma.CalendarUpsertWithoutMembersInput
  connect?: Prisma.CalendarWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CalendarUpdateToOneWithWhereWithoutMembersInput, Prisma.CalendarUpdateWithoutMembersInput>, Prisma.CalendarUncheckedUpdateWithoutMembersInput>
}

export type CalendarCreateNestedOneWithoutRecurringSlotsInput = {
  create?: Prisma.XOR<Prisma.CalendarCreateWithoutRecurringSlotsInput, Prisma.CalendarUncheckedCreateWithoutRecurringSlotsInput>
  connectOrCreate?: Prisma.CalendarCreateOrConnectWithoutRecurringSlotsInput
  connect?: Prisma.CalendarWhereUniqueInput
}

export type CalendarUpdateOneRequiredWithoutRecurringSlotsNestedInput = {
  create?: Prisma.XOR<Prisma.CalendarCreateWithoutRecurringSlotsInput, Prisma.CalendarUncheckedCreateWithoutRecurringSlotsInput>
  connectOrCreate?: Prisma.CalendarCreateOrConnectWithoutRecurringSlotsInput
  upsert?: Prisma.CalendarUpsertWithoutRecurringSlotsInput
  connect?: Prisma.CalendarWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CalendarUpdateToOneWithWhereWithoutRecurringSlotsInput, Prisma.CalendarUpdateWithoutRecurringSlotsInput>, Prisma.CalendarUncheckedUpdateWithoutRecurringSlotsInput>
}

export type CalendarCreateWithoutEventsInput = {
  id?: string
  name: string
  color?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  members?: Prisma.CalendarParticipantCreateNestedManyWithoutCalendarInput
  recurringSlots?: Prisma.RecurringSlotCreateNestedManyWithoutCalendarInput
}

export type CalendarUncheckedCreateWithoutEventsInput = {
  id?: string
  name: string
  color?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  members?: Prisma.CalendarParticipantUncheckedCreateNestedManyWithoutCalendarInput
  recurringSlots?: Prisma.RecurringSlotUncheckedCreateNestedManyWithoutCalendarInput
}

export type CalendarCreateOrConnectWithoutEventsInput = {
  where: Prisma.CalendarWhereUniqueInput
  create: Prisma.XOR<Prisma.CalendarCreateWithoutEventsInput, Prisma.CalendarUncheckedCreateWithoutEventsInput>
}

export type CalendarUpsertWithoutEventsInput = {
  update: Prisma.XOR<Prisma.CalendarUpdateWithoutEventsInput, Prisma.CalendarUncheckedUpdateWithoutEventsInput>
  create: Prisma.XOR<Prisma.CalendarCreateWithoutEventsInput, Prisma.CalendarUncheckedCreateWithoutEventsInput>
  where?: Prisma.CalendarWhereInput
}

export type CalendarUpdateToOneWithWhereWithoutEventsInput = {
  where?: Prisma.CalendarWhereInput
  data: Prisma.XOR<Prisma.CalendarUpdateWithoutEventsInput, Prisma.CalendarUncheckedUpdateWithoutEventsInput>
}

export type CalendarUpdateWithoutEventsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  members?: Prisma.CalendarParticipantUpdateManyWithoutCalendarNestedInput
  recurringSlots?: Prisma.RecurringSlotUpdateManyWithoutCalendarNestedInput
}

export type CalendarUncheckedUpdateWithoutEventsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  members?: Prisma.CalendarParticipantUncheckedUpdateManyWithoutCalendarNestedInput
  recurringSlots?: Prisma.RecurringSlotUncheckedUpdateManyWithoutCalendarNestedInput
}

export type CalendarCreateWithoutMembersInput = {
  id?: string
  name: string
  color?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  events?: Prisma.EventCreateNestedManyWithoutCalendarInput
  recurringSlots?: Prisma.RecurringSlotCreateNestedManyWithoutCalendarInput
}

export type CalendarUncheckedCreateWithoutMembersInput = {
  id?: string
  name: string
  color?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  events?: Prisma.EventUncheckedCreateNestedManyWithoutCalendarInput
  recurringSlots?: Prisma.RecurringSlotUncheckedCreateNestedManyWithoutCalendarInput
}

export type CalendarCreateOrConnectWithoutMembersInput = {
  where: Prisma.CalendarWhereUniqueInput
  create: Prisma.XOR<Prisma.CalendarCreateWithoutMembersInput, Prisma.CalendarUncheckedCreateWithoutMembersInput>
}

export type CalendarUpsertWithoutMembersInput = {
  update: Prisma.XOR<Prisma.CalendarUpdateWithoutMembersInput, Prisma.CalendarUncheckedUpdateWithoutMembersInput>
  create: Prisma.XOR<Prisma.CalendarCreateWithoutMembersInput, Prisma.CalendarUncheckedCreateWithoutMembersInput>
  where?: Prisma.CalendarWhereInput
}

export type CalendarUpdateToOneWithWhereWithoutMembersInput = {
  where?: Prisma.CalendarWhereInput
  data: Prisma.XOR<Prisma.CalendarUpdateWithoutMembersInput, Prisma.CalendarUncheckedUpdateWithoutMembersInput>
}

export type CalendarUpdateWithoutMembersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  events?: Prisma.EventUpdateManyWithoutCalendarNestedInput
  recurringSlots?: Prisma.RecurringSlotUpdateManyWithoutCalendarNestedInput
}

export type CalendarUncheckedUpdateWithoutMembersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  events?: Prisma.EventUncheckedUpdateManyWithoutCalendarNestedInput
  recurringSlots?: Prisma.RecurringSlotUncheckedUpdateManyWithoutCalendarNestedInput
}

export type CalendarCreateWithoutRecurringSlotsInput = {
  id?: string
  name: string
  color?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  events?: Prisma.EventCreateNestedManyWithoutCalendarInput
  members?: Prisma.CalendarParticipantCreateNestedManyWithoutCalendarInput
}

export type CalendarUncheckedCreateWithoutRecurringSlotsInput = {
  id?: string
  name: string
  color?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  events?: Prisma.EventUncheckedCreateNestedManyWithoutCalendarInput
  members?: Prisma.CalendarParticipantUncheckedCreateNestedManyWithoutCalendarInput
}

export type CalendarCreateOrConnectWithoutRecurringSlotsInput = {
  where: Prisma.CalendarWhereUniqueInput
  create: Prisma.XOR<Prisma.CalendarCreateWithoutRecurringSlotsInput, Prisma.CalendarUncheckedCreateWithoutRecurringSlotsInput>
}

export type CalendarUpsertWithoutRecurringSlotsInput = {
  update: Prisma.XOR<Prisma.CalendarUpdateWithoutRecurringSlotsInput, Prisma.CalendarUncheckedUpdateWithoutRecurringSlotsInput>
  create: Prisma.XOR<Prisma.CalendarCreateWithoutRecurringSlotsInput, Prisma.CalendarUncheckedCreateWithoutRecurringSlotsInput>
  where?: Prisma.CalendarWhereInput
}

export type CalendarUpdateToOneWithWhereWithoutRecurringSlotsInput = {
  where?: Prisma.CalendarWhereInput
  data: Prisma.XOR<Prisma.CalendarUpdateWithoutRecurringSlotsInput, Prisma.CalendarUncheckedUpdateWithoutRecurringSlotsInput>
}

export type CalendarUpdateWithoutRecurringSlotsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  events?: Prisma.EventUpdateManyWithoutCalendarNestedInput
  members?: Prisma.CalendarParticipantUpdateManyWithoutCalendarNestedInput
}

export type CalendarUncheckedUpdateWithoutRecurringSlotsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  events?: Prisma.EventUncheckedUpdateManyWithoutCalendarNestedInput
  members?: Prisma.CalendarParticipantUncheckedUpdateManyWithoutCalendarNestedInput
}


/**
 * Count Type CalendarCountOutputType
 */

export type CalendarCountOutputType = {
  events: number
  members: number
  recurringSlots: number
}

export type CalendarCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  events?: boolean | CalendarCountOutputTypeCountEventsArgs
  members?: boolean | CalendarCountOutputTypeCountMembersArgs
  recurringSlots?: boolean | CalendarCountOutputTypeCountRecurringSlotsArgs
}

/**
 * CalendarCountOutputType without action
 */
export type CalendarCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CalendarCountOutputType
   */
  select?: Prisma.CalendarCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CalendarCountOutputType without action
 */
export type CalendarCountOutputTypeCountEventsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EventWhereInput
}

/**
 * CalendarCountOutputType without action
 */
export type CalendarCountOutputTypeCountMembersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CalendarParticipantWhereInput
}

/**
 * CalendarCountOutputType without action
 */
export type CalendarCountOutputTypeCountRecurringSlotsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RecurringSlotWhereInput
}


export type CalendarSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  color?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  events?: boolean | Prisma.Calendar$eventsArgs<ExtArgs>
  members?: boolean | Prisma.Calendar$membersArgs<ExtArgs>
  recurringSlots?: boolean | Prisma.Calendar$recurringSlotsArgs<ExtArgs>
  _count?: boolean | Prisma.CalendarCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["calendar"]>



export type CalendarSelectScalar = {
  id?: boolean
  name?: boolean
  color?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type CalendarOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "color" | "createdAt" | "updatedAt", ExtArgs["result"]["calendar"]>
export type CalendarInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  events?: boolean | Prisma.Calendar$eventsArgs<ExtArgs>
  members?: boolean | Prisma.Calendar$membersArgs<ExtArgs>
  recurringSlots?: boolean | Prisma.Calendar$recurringSlotsArgs<ExtArgs>
  _count?: boolean | Prisma.CalendarCountOutputTypeDefaultArgs<ExtArgs>
}

export type $CalendarPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Calendar"
  objects: {
    events: Prisma.$EventPayload<ExtArgs>[]
    members: Prisma.$CalendarParticipantPayload<ExtArgs>[]
    recurringSlots: Prisma.$RecurringSlotPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    color: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["calendar"]>
  composites: {}
}

export type CalendarGetPayload<S extends boolean | null | undefined | CalendarDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CalendarPayload, S>

export type CalendarCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CalendarFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CalendarCountAggregateInputType | true
  }

export interface CalendarDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Calendar'], meta: { name: 'Calendar' } }
  /**
   * Find zero or one Calendar that matches the filter.
   * @param {CalendarFindUniqueArgs} args - Arguments to find a Calendar
   * @example
   * // Get one Calendar
   * const calendar = await prisma.calendar.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CalendarFindUniqueArgs>(args: Prisma.SelectSubset<T, CalendarFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CalendarClient<runtime.Types.Result.GetResult<Prisma.$CalendarPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Calendar that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CalendarFindUniqueOrThrowArgs} args - Arguments to find a Calendar
   * @example
   * // Get one Calendar
   * const calendar = await prisma.calendar.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CalendarFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CalendarFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CalendarClient<runtime.Types.Result.GetResult<Prisma.$CalendarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Calendar that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarFindFirstArgs} args - Arguments to find a Calendar
   * @example
   * // Get one Calendar
   * const calendar = await prisma.calendar.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CalendarFindFirstArgs>(args?: Prisma.SelectSubset<T, CalendarFindFirstArgs<ExtArgs>>): Prisma.Prisma__CalendarClient<runtime.Types.Result.GetResult<Prisma.$CalendarPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Calendar that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarFindFirstOrThrowArgs} args - Arguments to find a Calendar
   * @example
   * // Get one Calendar
   * const calendar = await prisma.calendar.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CalendarFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CalendarFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CalendarClient<runtime.Types.Result.GetResult<Prisma.$CalendarPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Calendars that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Calendars
   * const calendars = await prisma.calendar.findMany()
   * 
   * // Get first 10 Calendars
   * const calendars = await prisma.calendar.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const calendarWithIdOnly = await prisma.calendar.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CalendarFindManyArgs>(args?: Prisma.SelectSubset<T, CalendarFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CalendarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Calendar.
   * @param {CalendarCreateArgs} args - Arguments to create a Calendar.
   * @example
   * // Create one Calendar
   * const Calendar = await prisma.calendar.create({
   *   data: {
   *     // ... data to create a Calendar
   *   }
   * })
   * 
   */
  create<T extends CalendarCreateArgs>(args: Prisma.SelectSubset<T, CalendarCreateArgs<ExtArgs>>): Prisma.Prisma__CalendarClient<runtime.Types.Result.GetResult<Prisma.$CalendarPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Calendars.
   * @param {CalendarCreateManyArgs} args - Arguments to create many Calendars.
   * @example
   * // Create many Calendars
   * const calendar = await prisma.calendar.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CalendarCreateManyArgs>(args?: Prisma.SelectSubset<T, CalendarCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Calendar.
   * @param {CalendarDeleteArgs} args - Arguments to delete one Calendar.
   * @example
   * // Delete one Calendar
   * const Calendar = await prisma.calendar.delete({
   *   where: {
   *     // ... filter to delete one Calendar
   *   }
   * })
   * 
   */
  delete<T extends CalendarDeleteArgs>(args: Prisma.SelectSubset<T, CalendarDeleteArgs<ExtArgs>>): Prisma.Prisma__CalendarClient<runtime.Types.Result.GetResult<Prisma.$CalendarPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Calendar.
   * @param {CalendarUpdateArgs} args - Arguments to update one Calendar.
   * @example
   * // Update one Calendar
   * const calendar = await prisma.calendar.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CalendarUpdateArgs>(args: Prisma.SelectSubset<T, CalendarUpdateArgs<ExtArgs>>): Prisma.Prisma__CalendarClient<runtime.Types.Result.GetResult<Prisma.$CalendarPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Calendars.
   * @param {CalendarDeleteManyArgs} args - Arguments to filter Calendars to delete.
   * @example
   * // Delete a few Calendars
   * const { count } = await prisma.calendar.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CalendarDeleteManyArgs>(args?: Prisma.SelectSubset<T, CalendarDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Calendars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Calendars
   * const calendar = await prisma.calendar.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CalendarUpdateManyArgs>(args: Prisma.SelectSubset<T, CalendarUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Calendar.
   * @param {CalendarUpsertArgs} args - Arguments to update or create a Calendar.
   * @example
   * // Update or create a Calendar
   * const calendar = await prisma.calendar.upsert({
   *   create: {
   *     // ... data to create a Calendar
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Calendar we want to update
   *   }
   * })
   */
  upsert<T extends CalendarUpsertArgs>(args: Prisma.SelectSubset<T, CalendarUpsertArgs<ExtArgs>>): Prisma.Prisma__CalendarClient<runtime.Types.Result.GetResult<Prisma.$CalendarPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Calendars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarCountArgs} args - Arguments to filter Calendars to count.
   * @example
   * // Count the number of Calendars
   * const count = await prisma.calendar.count({
   *   where: {
   *     // ... the filter for the Calendars we want to count
   *   }
   * })
  **/
  count<T extends CalendarCountArgs>(
    args?: Prisma.Subset<T, CalendarCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CalendarCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Calendar.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CalendarAggregateArgs>(args: Prisma.Subset<T, CalendarAggregateArgs>): Prisma.PrismaPromise<GetCalendarAggregateType<T>>

  /**
   * Group by Calendar.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CalendarGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CalendarGroupByArgs['orderBy'] }
      : { orderBy?: CalendarGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CalendarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCalendarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Calendar model
 */
readonly fields: CalendarFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Calendar.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CalendarClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  events<T extends Prisma.Calendar$eventsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Calendar$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  members<T extends Prisma.Calendar$membersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Calendar$membersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CalendarParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  recurringSlots<T extends Prisma.Calendar$recurringSlotsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Calendar$recurringSlotsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RecurringSlotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Calendar model
 */
export interface CalendarFieldRefs {
  readonly id: Prisma.FieldRef<"Calendar", 'String'>
  readonly name: Prisma.FieldRef<"Calendar", 'String'>
  readonly color: Prisma.FieldRef<"Calendar", 'String'>
  readonly createdAt: Prisma.FieldRef<"Calendar", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Calendar", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Calendar findUnique
 */
export type CalendarFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Calendar
   */
  select?: Prisma.CalendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Calendar
   */
  omit?: Prisma.CalendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarInclude<ExtArgs> | null
  /**
   * Filter, which Calendar to fetch.
   */
  where: Prisma.CalendarWhereUniqueInput
}

/**
 * Calendar findUniqueOrThrow
 */
export type CalendarFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Calendar
   */
  select?: Prisma.CalendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Calendar
   */
  omit?: Prisma.CalendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarInclude<ExtArgs> | null
  /**
   * Filter, which Calendar to fetch.
   */
  where: Prisma.CalendarWhereUniqueInput
}

/**
 * Calendar findFirst
 */
export type CalendarFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Calendar
   */
  select?: Prisma.CalendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Calendar
   */
  omit?: Prisma.CalendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarInclude<ExtArgs> | null
  /**
   * Filter, which Calendar to fetch.
   */
  where?: Prisma.CalendarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Calendars to fetch.
   */
  orderBy?: Prisma.CalendarOrderByWithRelationInput | Prisma.CalendarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Calendars.
   */
  cursor?: Prisma.CalendarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Calendars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Calendars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Calendars.
   */
  distinct?: Prisma.CalendarScalarFieldEnum | Prisma.CalendarScalarFieldEnum[]
}

/**
 * Calendar findFirstOrThrow
 */
export type CalendarFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Calendar
   */
  select?: Prisma.CalendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Calendar
   */
  omit?: Prisma.CalendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarInclude<ExtArgs> | null
  /**
   * Filter, which Calendar to fetch.
   */
  where?: Prisma.CalendarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Calendars to fetch.
   */
  orderBy?: Prisma.CalendarOrderByWithRelationInput | Prisma.CalendarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Calendars.
   */
  cursor?: Prisma.CalendarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Calendars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Calendars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Calendars.
   */
  distinct?: Prisma.CalendarScalarFieldEnum | Prisma.CalendarScalarFieldEnum[]
}

/**
 * Calendar findMany
 */
export type CalendarFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Calendar
   */
  select?: Prisma.CalendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Calendar
   */
  omit?: Prisma.CalendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarInclude<ExtArgs> | null
  /**
   * Filter, which Calendars to fetch.
   */
  where?: Prisma.CalendarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Calendars to fetch.
   */
  orderBy?: Prisma.CalendarOrderByWithRelationInput | Prisma.CalendarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Calendars.
   */
  cursor?: Prisma.CalendarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Calendars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Calendars.
   */
  skip?: number
  distinct?: Prisma.CalendarScalarFieldEnum | Prisma.CalendarScalarFieldEnum[]
}

/**
 * Calendar create
 */
export type CalendarCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Calendar
   */
  select?: Prisma.CalendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Calendar
   */
  omit?: Prisma.CalendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarInclude<ExtArgs> | null
  /**
   * The data needed to create a Calendar.
   */
  data: Prisma.XOR<Prisma.CalendarCreateInput, Prisma.CalendarUncheckedCreateInput>
}

/**
 * Calendar createMany
 */
export type CalendarCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Calendars.
   */
  data: Prisma.CalendarCreateManyInput | Prisma.CalendarCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Calendar update
 */
export type CalendarUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Calendar
   */
  select?: Prisma.CalendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Calendar
   */
  omit?: Prisma.CalendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarInclude<ExtArgs> | null
  /**
   * The data needed to update a Calendar.
   */
  data: Prisma.XOR<Prisma.CalendarUpdateInput, Prisma.CalendarUncheckedUpdateInput>
  /**
   * Choose, which Calendar to update.
   */
  where: Prisma.CalendarWhereUniqueInput
}

/**
 * Calendar updateMany
 */
export type CalendarUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Calendars.
   */
  data: Prisma.XOR<Prisma.CalendarUpdateManyMutationInput, Prisma.CalendarUncheckedUpdateManyInput>
  /**
   * Filter which Calendars to update
   */
  where?: Prisma.CalendarWhereInput
  /**
   * Limit how many Calendars to update.
   */
  limit?: number
}

/**
 * Calendar upsert
 */
export type CalendarUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Calendar
   */
  select?: Prisma.CalendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Calendar
   */
  omit?: Prisma.CalendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarInclude<ExtArgs> | null
  /**
   * The filter to search for the Calendar to update in case it exists.
   */
  where: Prisma.CalendarWhereUniqueInput
  /**
   * In case the Calendar found by the `where` argument doesn't exist, create a new Calendar with this data.
   */
  create: Prisma.XOR<Prisma.CalendarCreateInput, Prisma.CalendarUncheckedCreateInput>
  /**
   * In case the Calendar was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CalendarUpdateInput, Prisma.CalendarUncheckedUpdateInput>
}

/**
 * Calendar delete
 */
export type CalendarDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Calendar
   */
  select?: Prisma.CalendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Calendar
   */
  omit?: Prisma.CalendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarInclude<ExtArgs> | null
  /**
   * Filter which Calendar to delete.
   */
  where: Prisma.CalendarWhereUniqueInput
}

/**
 * Calendar deleteMany
 */
export type CalendarDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Calendars to delete
   */
  where?: Prisma.CalendarWhereInput
  /**
   * Limit how many Calendars to delete.
   */
  limit?: number
}

/**
 * Calendar.events
 */
export type Calendar$eventsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  where?: Prisma.EventWhereInput
  orderBy?: Prisma.EventOrderByWithRelationInput | Prisma.EventOrderByWithRelationInput[]
  cursor?: Prisma.EventWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EventScalarFieldEnum | Prisma.EventScalarFieldEnum[]
}

/**
 * Calendar.members
 */
export type Calendar$membersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CalendarParticipant
   */
  select?: Prisma.CalendarParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CalendarParticipant
   */
  omit?: Prisma.CalendarParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarParticipantInclude<ExtArgs> | null
  where?: Prisma.CalendarParticipantWhereInput
  orderBy?: Prisma.CalendarParticipantOrderByWithRelationInput | Prisma.CalendarParticipantOrderByWithRelationInput[]
  cursor?: Prisma.CalendarParticipantWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CalendarParticipantScalarFieldEnum | Prisma.CalendarParticipantScalarFieldEnum[]
}

/**
 * Calendar.recurringSlots
 */
export type Calendar$recurringSlotsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RecurringSlot
   */
  select?: Prisma.RecurringSlotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RecurringSlot
   */
  omit?: Prisma.RecurringSlotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecurringSlotInclude<ExtArgs> | null
  where?: Prisma.RecurringSlotWhereInput
  orderBy?: Prisma.RecurringSlotOrderByWithRelationInput | Prisma.RecurringSlotOrderByWithRelationInput[]
  cursor?: Prisma.RecurringSlotWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.RecurringSlotScalarFieldEnum | Prisma.RecurringSlotScalarFieldEnum[]
}

/**
 * Calendar without action
 */
export type CalendarDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Calendar
   */
  select?: Prisma.CalendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Calendar
   */
  omit?: Prisma.CalendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CalendarInclude<ExtArgs> | null
}
