
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `EventParticipant` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model EventParticipant
 * 
 */
export type EventParticipantModel = runtime.Types.Result.DefaultSelection<Prisma.$EventParticipantPayload>

export type AggregateEventParticipant = {
  _count: EventParticipantCountAggregateOutputType | null
  _min: EventParticipantMinAggregateOutputType | null
  _max: EventParticipantMaxAggregateOutputType | null
}

export type EventParticipantMinAggregateOutputType = {
  id: string | null
  eventId: string | null
  participantId: string | null
}

export type EventParticipantMaxAggregateOutputType = {
  id: string | null
  eventId: string | null
  participantId: string | null
}

export type EventParticipantCountAggregateOutputType = {
  id: number
  eventId: number
  participantId: number
  _all: number
}


export type EventParticipantMinAggregateInputType = {
  id?: true
  eventId?: true
  participantId?: true
}

export type EventParticipantMaxAggregateInputType = {
  id?: true
  eventId?: true
  participantId?: true
}

export type EventParticipantCountAggregateInputType = {
  id?: true
  eventId?: true
  participantId?: true
  _all?: true
}

export type EventParticipantAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EventParticipant to aggregate.
   */
  where?: Prisma.EventParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EventParticipants to fetch.
   */
  orderBy?: Prisma.EventParticipantOrderByWithRelationInput | Prisma.EventParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EventParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EventParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EventParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EventParticipants
  **/
  _count?: true | EventParticipantCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EventParticipantMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EventParticipantMaxAggregateInputType
}

export type GetEventParticipantAggregateType<T extends EventParticipantAggregateArgs> = {
      [P in keyof T & keyof AggregateEventParticipant]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEventParticipant[P]>
    : Prisma.GetScalarType<T[P], AggregateEventParticipant[P]>
}




export type EventParticipantGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EventParticipantWhereInput
  orderBy?: Prisma.EventParticipantOrderByWithAggregationInput | Prisma.EventParticipantOrderByWithAggregationInput[]
  by: Prisma.EventParticipantScalarFieldEnum[] | Prisma.EventParticipantScalarFieldEnum
  having?: Prisma.EventParticipantScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EventParticipantCountAggregateInputType | true
  _min?: EventParticipantMinAggregateInputType
  _max?: EventParticipantMaxAggregateInputType
}

export type EventParticipantGroupByOutputType = {
  id: string
  eventId: string
  participantId: string
  _count: EventParticipantCountAggregateOutputType | null
  _min: EventParticipantMinAggregateOutputType | null
  _max: EventParticipantMaxAggregateOutputType | null
}

type GetEventParticipantGroupByPayload<T extends EventParticipantGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EventParticipantGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EventParticipantGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EventParticipantGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EventParticipantGroupByOutputType[P]>
      }
    >
  >



export type EventParticipantWhereInput = {
  AND?: Prisma.EventParticipantWhereInput | Prisma.EventParticipantWhereInput[]
  OR?: Prisma.EventParticipantWhereInput[]
  NOT?: Prisma.EventParticipantWhereInput | Prisma.EventParticipantWhereInput[]
  id?: Prisma.StringFilter<"EventParticipant"> | string
  eventId?: Prisma.StringFilter<"EventParticipant"> | string
  participantId?: Prisma.StringFilter<"EventParticipant"> | string
  event?: Prisma.XOR<Prisma.EventScalarRelationFilter, Prisma.EventWhereInput>
  participant?: Prisma.XOR<Prisma.ParticipantScalarRelationFilter, Prisma.ParticipantWhereInput>
}

export type EventParticipantOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
  event?: Prisma.EventOrderByWithRelationInput
  participant?: Prisma.ParticipantOrderByWithRelationInput
  _relevance?: Prisma.EventParticipantOrderByRelevanceInput
}

export type EventParticipantWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  eventId_participantId?: Prisma.EventParticipantEventIdParticipantIdCompoundUniqueInput
  AND?: Prisma.EventParticipantWhereInput | Prisma.EventParticipantWhereInput[]
  OR?: Prisma.EventParticipantWhereInput[]
  NOT?: Prisma.EventParticipantWhereInput | Prisma.EventParticipantWhereInput[]
  eventId?: Prisma.StringFilter<"EventParticipant"> | string
  participantId?: Prisma.StringFilter<"EventParticipant"> | string
  event?: Prisma.XOR<Prisma.EventScalarRelationFilter, Prisma.EventWhereInput>
  participant?: Prisma.XOR<Prisma.ParticipantScalarRelationFilter, Prisma.ParticipantWhereInput>
}, "id" | "eventId_participantId">

export type EventParticipantOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
  _count?: Prisma.EventParticipantCountOrderByAggregateInput
  _max?: Prisma.EventParticipantMaxOrderByAggregateInput
  _min?: Prisma.EventParticipantMinOrderByAggregateInput
}

export type EventParticipantScalarWhereWithAggregatesInput = {
  AND?: Prisma.EventParticipantScalarWhereWithAggregatesInput | Prisma.EventParticipantScalarWhereWithAggregatesInput[]
  OR?: Prisma.EventParticipantScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EventParticipantScalarWhereWithAggregatesInput | Prisma.EventParticipantScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"EventParticipant"> | string
  eventId?: Prisma.StringWithAggregatesFilter<"EventParticipant"> | string
  participantId?: Prisma.StringWithAggregatesFilter<"EventParticipant"> | string
}

export type EventParticipantCreateInput = {
  id?: string
  event: Prisma.EventCreateNestedOneWithoutAttendeesInput
  participant: Prisma.ParticipantCreateNestedOneWithoutEventsInput
}

export type EventParticipantUncheckedCreateInput = {
  id?: string
  eventId: string
  participantId: string
}

export type EventParticipantUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  event?: Prisma.EventUpdateOneRequiredWithoutAttendeesNestedInput
  participant?: Prisma.ParticipantUpdateOneRequiredWithoutEventsNestedInput
}

export type EventParticipantUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
  participantId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EventParticipantCreateManyInput = {
  id?: string
  eventId: string
  participantId: string
}

export type EventParticipantUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EventParticipantUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
  participantId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EventParticipantListRelationFilter = {
  every?: Prisma.EventParticipantWhereInput
  some?: Prisma.EventParticipantWhereInput
  none?: Prisma.EventParticipantWhereInput
}

export type EventParticipantOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EventParticipantOrderByRelevanceInput = {
  fields: Prisma.EventParticipantOrderByRelevanceFieldEnum | Prisma.EventParticipantOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type EventParticipantEventIdParticipantIdCompoundUniqueInput = {
  eventId: string
  participantId: string
}

export type EventParticipantCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
}

export type EventParticipantMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
}

export type EventParticipantMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  participantId?: Prisma.SortOrder
}

export type EventParticipantCreateNestedManyWithoutEventInput = {
  create?: Prisma.XOR<Prisma.EventParticipantCreateWithoutEventInput, Prisma.EventParticipantUncheckedCreateWithoutEventInput> | Prisma.EventParticipantCreateWithoutEventInput[] | Prisma.EventParticipantUncheckedCreateWithoutEventInput[]
  connectOrCreate?: Prisma.EventParticipantCreateOrConnectWithoutEventInput | Prisma.EventParticipantCreateOrConnectWithoutEventInput[]
  createMany?: Prisma.EventParticipantCreateManyEventInputEnvelope
  connect?: Prisma.EventParticipantWhereUniqueInput | Prisma.EventParticipantWhereUniqueInput[]
}

export type EventParticipantUncheckedCreateNestedManyWithoutEventInput = {
  create?: Prisma.XOR<Prisma.EventParticipantCreateWithoutEventInput, Prisma.EventParticipantUncheckedCreateWithoutEventInput> | Prisma.EventParticipantCreateWithoutEventInput[] | Prisma.EventParticipantUncheckedCreateWithoutEventInput[]
  connectOrCreate?: Prisma.EventParticipantCreateOrConnectWithoutEventInput | Prisma.EventParticipantCreateOrConnectWithoutEventInput[]
  createMany?: Prisma.EventParticipantCreateManyEventInputEnvelope
  connect?: Prisma.EventParticipantWhereUniqueInput | Prisma.EventParticipantWhereUniqueInput[]
}

export type EventParticipantUpdateManyWithoutEventNestedInput = {
  create?: Prisma.XOR<Prisma.EventParticipantCreateWithoutEventInput, Prisma.EventParticipantUncheckedCreateWithoutEventInput> | Prisma.EventParticipantCreateWithoutEventInput[] | Prisma.EventParticipantUncheckedCreateWithoutEventInput[]
  connectOrCreate?: Prisma.EventParticipantCreateOrConnectWithoutEventInput | Prisma.EventParticipantCreateOrConnectWithoutEventInput[]
  upsert?: Prisma.EventParticipantUpsertWithWhereUniqueWithoutEventInput | Prisma.EventParticipantUpsertWithWhereUniqueWithoutEventInput[]
  createMany?: Prisma.EventParticipantCreateManyEventInputEnvelope
  set?: Prisma.EventParticipantWhereUniqueInput | Prisma.EventParticipantWhereUniqueInput[]
  disconnect?: Prisma.EventParticipantWhereUniqueInput | Prisma.EventParticipantWhereUniqueInput[]
  delete?: Prisma.EventParticipantWhereUniqueInput | Prisma.EventParticipantWhereUniqueInput[]
  connect?: Prisma.EventParticipantWhereUniqueInput | Prisma.EventParticipantWhereUniqueInput[]
  update?: Prisma.EventParticipantUpdateWithWhereUniqueWithoutEventInput | Prisma.EventParticipantUpdateWithWhereUniqueWithoutEventInput[]
  updateMany?: Prisma.EventParticipantUpdateManyWithWhereWithoutEventInput | Prisma.EventParticipantUpdateManyWithWhereWithoutEventInput[]
  deleteMany?: Prisma.EventParticipantScalarWhereInput | Prisma.EventParticipantScalarWhereInput[]
}

export type EventParticipantUncheckedUpdateManyWithoutEventNestedInput = {
  create?: Prisma.XOR<Prisma.EventParticipantCreateWithoutEventInput, Prisma.EventParticipantUncheckedCreateWithoutEventInput> | Prisma.EventParticipantCreateWithoutEventInput[] | Prisma.EventParticipantUncheckedCreateWithoutEventInput[]
  connectOrCreate?: Prisma.EventParticipantCreateOrConnectWithoutEventInput | Prisma.EventParticipantCreateOrConnectWithoutEventInput[]
  upsert?: Prisma.EventParticipantUpsertWithWhereUniqueWithoutEventInput | Prisma.EventParticipantUpsertWithWhereUniqueWithoutEventInput[]
  createMany?: Prisma.EventParticipantCreateManyEventInputEnvelope
  set?: Prisma.EventParticipantWhereUniqueInput | Prisma.EventParticipantWhereUniqueInput[]
  disconnect?: Prisma.EventParticipantWhereUniqueInput | Prisma.EventParticipantWhereUniqueInput[]
  delete?: Prisma.EventParticipantWhereUniqueInput | Prisma.EventParticipantWhereUniqueInput[]
  connect?: Prisma.EventParticipantWhereUniqueInput | Prisma.EventParticipantWhereUniqueInput[]
  update?: Prisma.EventParticipantUpdateWithWhereUniqueWithoutEventInput | Prisma.EventParticipantUpdateWithWhereUniqueWithoutEventInput[]
  updateMany?: Prisma.EventParticipantUpdateManyWithWhereWithoutEventInput | Prisma.EventParticipantUpdateManyWithWhereWithoutEventInput[]
  deleteMany?: Prisma.EventParticipantScalarWhereInput | Prisma.EventParticipantScalarWhereInput[]
}

export type EventParticipantCreateNestedManyWithoutParticipantInput = {
  create?: Prisma.XOR<Prisma.EventParticipantCreateWithoutParticipantInput, Prisma.EventParticipantUncheckedCreateWithoutParticipantInput> | Prisma.EventParticipantCreateWithoutParticipantInput[] | Prisma.EventParticipantUncheckedCreateWithoutParticipantInput[]
  connectOrCreate?: Prisma.EventParticipantCreateOrConnectWithoutParticipantInput | Prisma.EventParticipantCreateOrConnectWithoutParticipantInput[]
  createMany?: Prisma.EventParticipantCreateManyParticipantInputEnvelope
  connect?: Prisma.EventParticipantWhereUniqueInput | Prisma.EventParticipantWhereUniqueInput[]
}

export type EventParticipantUncheckedCreateNestedManyWithoutParticipantInput = {
  create?: Prisma.XOR<Prisma.EventParticipantCreateWithoutParticipantInput, Prisma.EventParticipantUncheckedCreateWithoutParticipantInput> | Prisma.EventParticipantCreateWithoutParticipantInput[] | Prisma.EventParticipantUncheckedCreateWithoutParticipantInput[]
  connectOrCreate?: Prisma.EventParticipantCreateOrConnectWithoutParticipantInput | Prisma.EventParticipantCreateOrConnectWithoutParticipantInput[]
  createMany?: Prisma.EventParticipantCreateManyParticipantInputEnvelope
  connect?: Prisma.EventParticipantWhereUniqueInput | Prisma.EventParticipantWhereUniqueInput[]
}

export type EventParticipantUpdateManyWithoutParticipantNestedInput = {
  create?: Prisma.XOR<Prisma.EventParticipantCreateWithoutParticipantInput, Prisma.EventParticipantUncheckedCreateWithoutParticipantInput> | Prisma.EventParticipantCreateWithoutParticipantInput[] | Prisma.EventParticipantUncheckedCreateWithoutParticipantInput[]
  connectOrCreate?: Prisma.EventParticipantCreateOrConnectWithoutParticipantInput | Prisma.EventParticipantCreateOrConnectWithoutParticipantInput[]
  upsert?: Prisma.EventParticipantUpsertWithWhereUniqueWithoutParticipantInput | Prisma.EventParticipantUpsertWithWhereUniqueWithoutParticipantInput[]
  createMany?: Prisma.EventParticipantCreateManyParticipantInputEnvelope
  set?: Prisma.EventParticipantWhereUniqueInput | Prisma.EventParticipantWhereUniqueInput[]
  disconnect?: Prisma.EventParticipantWhereUniqueInput | Prisma.EventParticipantWhereUniqueInput[]
  delete?: Prisma.EventParticipantWhereUniqueInput | Prisma.EventParticipantWhereUniqueInput[]
  connect?: Prisma.EventParticipantWhereUniqueInput | Prisma.EventParticipantWhereUniqueInput[]
  update?: Prisma.EventParticipantUpdateWithWhereUniqueWithoutParticipantInput | Prisma.EventParticipantUpdateWithWhereUniqueWithoutParticipantInput[]
  updateMany?: Prisma.EventParticipantUpdateManyWithWhereWithoutParticipantInput | Prisma.EventParticipantUpdateManyWithWhereWithoutParticipantInput[]
  deleteMany?: Prisma.EventParticipantScalarWhereInput | Prisma.EventParticipantScalarWhereInput[]
}

export type EventParticipantUncheckedUpdateManyWithoutParticipantNestedInput = {
  create?: Prisma.XOR<Prisma.EventParticipantCreateWithoutParticipantInput, Prisma.EventParticipantUncheckedCreateWithoutParticipantInput> | Prisma.EventParticipantCreateWithoutParticipantInput[] | Prisma.EventParticipantUncheckedCreateWithoutParticipantInput[]
  connectOrCreate?: Prisma.EventParticipantCreateOrConnectWithoutParticipantInput | Prisma.EventParticipantCreateOrConnectWithoutParticipantInput[]
  upsert?: Prisma.EventParticipantUpsertWithWhereUniqueWithoutParticipantInput | Prisma.EventParticipantUpsertWithWhereUniqueWithoutParticipantInput[]
  createMany?: Prisma.EventParticipantCreateManyParticipantInputEnvelope
  set?: Prisma.EventParticipantWhereUniqueInput | Prisma.EventParticipantWhereUniqueInput[]
  disconnect?: Prisma.EventParticipantWhereUniqueInput | Prisma.EventParticipantWhereUniqueInput[]
  delete?: Prisma.EventParticipantWhereUniqueInput | Prisma.EventParticipantWhereUniqueInput[]
  connect?: Prisma.EventParticipantWhereUniqueInput | Prisma.EventParticipantWhereUniqueInput[]
  update?: Prisma.EventParticipantUpdateWithWhereUniqueWithoutParticipantInput | Prisma.EventParticipantUpdateWithWhereUniqueWithoutParticipantInput[]
  updateMany?: Prisma.EventParticipantUpdateManyWithWhereWithoutParticipantInput | Prisma.EventParticipantUpdateManyWithWhereWithoutParticipantInput[]
  deleteMany?: Prisma.EventParticipantScalarWhereInput | Prisma.EventParticipantScalarWhereInput[]
}

export type EventParticipantCreateWithoutEventInput = {
  id?: string
  participant: Prisma.ParticipantCreateNestedOneWithoutEventsInput
}

export type EventParticipantUncheckedCreateWithoutEventInput = {
  id?: string
  participantId: string
}

export type EventParticipantCreateOrConnectWithoutEventInput = {
  where: Prisma.EventParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.EventParticipantCreateWithoutEventInput, Prisma.EventParticipantUncheckedCreateWithoutEventInput>
}

export type EventParticipantCreateManyEventInputEnvelope = {
  data: Prisma.EventParticipantCreateManyEventInput | Prisma.EventParticipantCreateManyEventInput[]
  skipDuplicates?: boolean
}

export type EventParticipantUpsertWithWhereUniqueWithoutEventInput = {
  where: Prisma.EventParticipantWhereUniqueInput
  update: Prisma.XOR<Prisma.EventParticipantUpdateWithoutEventInput, Prisma.EventParticipantUncheckedUpdateWithoutEventInput>
  create: Prisma.XOR<Prisma.EventParticipantCreateWithoutEventInput, Prisma.EventParticipantUncheckedCreateWithoutEventInput>
}

export type EventParticipantUpdateWithWhereUniqueWithoutEventInput = {
  where: Prisma.EventParticipantWhereUniqueInput
  data: Prisma.XOR<Prisma.EventParticipantUpdateWithoutEventInput, Prisma.EventParticipantUncheckedUpdateWithoutEventInput>
}

export type EventParticipantUpdateManyWithWhereWithoutEventInput = {
  where: Prisma.EventParticipantScalarWhereInput
  data: Prisma.XOR<Prisma.EventParticipantUpdateManyMutationInput, Prisma.EventParticipantUncheckedUpdateManyWithoutEventInput>
}

export type EventParticipantScalarWhereInput = {
  AND?: Prisma.EventParticipantScalarWhereInput | Prisma.EventParticipantScalarWhereInput[]
  OR?: Prisma.EventParticipantScalarWhereInput[]
  NOT?: Prisma.EventParticipantScalarWhereInput | Prisma.EventParticipantScalarWhereInput[]
  id?: Prisma.StringFilter<"EventParticipant"> | string
  eventId?: Prisma.StringFilter<"EventParticipant"> | string
  participantId?: Prisma.StringFilter<"EventParticipant"> | string
}

export type EventParticipantCreateWithoutParticipantInput = {
  id?: string
  event: Prisma.EventCreateNestedOneWithoutAttendeesInput
}

export type EventParticipantUncheckedCreateWithoutParticipantInput = {
  id?: string
  eventId: string
}

export type EventParticipantCreateOrConnectWithoutParticipantInput = {
  where: Prisma.EventParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.EventParticipantCreateWithoutParticipantInput, Prisma.EventParticipantUncheckedCreateWithoutParticipantInput>
}

export type EventParticipantCreateManyParticipantInputEnvelope = {
  data: Prisma.EventParticipantCreateManyParticipantInput | Prisma.EventParticipantCreateManyParticipantInput[]
  skipDuplicates?: boolean
}

export type EventParticipantUpsertWithWhereUniqueWithoutParticipantInput = {
  where: Prisma.EventParticipantWhereUniqueInput
  update: Prisma.XOR<Prisma.EventParticipantUpdateWithoutParticipantInput, Prisma.EventParticipantUncheckedUpdateWithoutParticipantInput>
  create: Prisma.XOR<Prisma.EventParticipantCreateWithoutParticipantInput, Prisma.EventParticipantUncheckedCreateWithoutParticipantInput>
}

export type EventParticipantUpdateWithWhereUniqueWithoutParticipantInput = {
  where: Prisma.EventParticipantWhereUniqueInput
  data: Prisma.XOR<Prisma.EventParticipantUpdateWithoutParticipantInput, Prisma.EventParticipantUncheckedUpdateWithoutParticipantInput>
}

export type EventParticipantUpdateManyWithWhereWithoutParticipantInput = {
  where: Prisma.EventParticipantScalarWhereInput
  data: Prisma.XOR<Prisma.EventParticipantUpdateManyMutationInput, Prisma.EventParticipantUncheckedUpdateManyWithoutParticipantInput>
}

export type EventParticipantCreateManyEventInput = {
  id?: string
  participantId: string
}

export type EventParticipantUpdateWithoutEventInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  participant?: Prisma.ParticipantUpdateOneRequiredWithoutEventsNestedInput
}

export type EventParticipantUncheckedUpdateWithoutEventInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  participantId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EventParticipantUncheckedUpdateManyWithoutEventInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  participantId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EventParticipantCreateManyParticipantInput = {
  id?: string
  eventId: string
}

export type EventParticipantUpdateWithoutParticipantInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  event?: Prisma.EventUpdateOneRequiredWithoutAttendeesNestedInput
}

export type EventParticipantUncheckedUpdateWithoutParticipantInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EventParticipantUncheckedUpdateManyWithoutParticipantInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type EventParticipantSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  eventId?: boolean
  participantId?: boolean
  event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
  participant?: boolean | Prisma.ParticipantDefaultArgs<ExtArgs>
}, ExtArgs["result"]["eventParticipant"]>



export type EventParticipantSelectScalar = {
  id?: boolean
  eventId?: boolean
  participantId?: boolean
}

export type EventParticipantOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "eventId" | "participantId", ExtArgs["result"]["eventParticipant"]>
export type EventParticipantInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  event?: boolean | Prisma.EventDefaultArgs<ExtArgs>
  participant?: boolean | Prisma.ParticipantDefaultArgs<ExtArgs>
}

export type $EventParticipantPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EventParticipant"
  objects: {
    event: Prisma.$EventPayload<ExtArgs>
    participant: Prisma.$ParticipantPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    eventId: string
    participantId: string
  }, ExtArgs["result"]["eventParticipant"]>
  composites: {}
}

export type EventParticipantGetPayload<S extends boolean | null | undefined | EventParticipantDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EventParticipantPayload, S>

export type EventParticipantCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EventParticipantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EventParticipantCountAggregateInputType | true
  }

export interface EventParticipantDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventParticipant'], meta: { name: 'EventParticipant' } }
  /**
   * Find zero or one EventParticipant that matches the filter.
   * @param {EventParticipantFindUniqueArgs} args - Arguments to find a EventParticipant
   * @example
   * // Get one EventParticipant
   * const eventParticipant = await prisma.eventParticipant.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EventParticipantFindUniqueArgs>(args: Prisma.SelectSubset<T, EventParticipantFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EventParticipantClient<runtime.Types.Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EventParticipant that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EventParticipantFindUniqueOrThrowArgs} args - Arguments to find a EventParticipant
   * @example
   * // Get one EventParticipant
   * const eventParticipant = await prisma.eventParticipant.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EventParticipantFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EventParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EventParticipantClient<runtime.Types.Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EventParticipant that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventParticipantFindFirstArgs} args - Arguments to find a EventParticipant
   * @example
   * // Get one EventParticipant
   * const eventParticipant = await prisma.eventParticipant.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EventParticipantFindFirstArgs>(args?: Prisma.SelectSubset<T, EventParticipantFindFirstArgs<ExtArgs>>): Prisma.Prisma__EventParticipantClient<runtime.Types.Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EventParticipant that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventParticipantFindFirstOrThrowArgs} args - Arguments to find a EventParticipant
   * @example
   * // Get one EventParticipant
   * const eventParticipant = await prisma.eventParticipant.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EventParticipantFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EventParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EventParticipantClient<runtime.Types.Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EventParticipants that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EventParticipants
   * const eventParticipants = await prisma.eventParticipant.findMany()
   * 
   * // Get first 10 EventParticipants
   * const eventParticipants = await prisma.eventParticipant.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const eventParticipantWithIdOnly = await prisma.eventParticipant.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EventParticipantFindManyArgs>(args?: Prisma.SelectSubset<T, EventParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EventParticipant.
   * @param {EventParticipantCreateArgs} args - Arguments to create a EventParticipant.
   * @example
   * // Create one EventParticipant
   * const EventParticipant = await prisma.eventParticipant.create({
   *   data: {
   *     // ... data to create a EventParticipant
   *   }
   * })
   * 
   */
  create<T extends EventParticipantCreateArgs>(args: Prisma.SelectSubset<T, EventParticipantCreateArgs<ExtArgs>>): Prisma.Prisma__EventParticipantClient<runtime.Types.Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EventParticipants.
   * @param {EventParticipantCreateManyArgs} args - Arguments to create many EventParticipants.
   * @example
   * // Create many EventParticipants
   * const eventParticipant = await prisma.eventParticipant.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EventParticipantCreateManyArgs>(args?: Prisma.SelectSubset<T, EventParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a EventParticipant.
   * @param {EventParticipantDeleteArgs} args - Arguments to delete one EventParticipant.
   * @example
   * // Delete one EventParticipant
   * const EventParticipant = await prisma.eventParticipant.delete({
   *   where: {
   *     // ... filter to delete one EventParticipant
   *   }
   * })
   * 
   */
  delete<T extends EventParticipantDeleteArgs>(args: Prisma.SelectSubset<T, EventParticipantDeleteArgs<ExtArgs>>): Prisma.Prisma__EventParticipantClient<runtime.Types.Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EventParticipant.
   * @param {EventParticipantUpdateArgs} args - Arguments to update one EventParticipant.
   * @example
   * // Update one EventParticipant
   * const eventParticipant = await prisma.eventParticipant.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EventParticipantUpdateArgs>(args: Prisma.SelectSubset<T, EventParticipantUpdateArgs<ExtArgs>>): Prisma.Prisma__EventParticipantClient<runtime.Types.Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EventParticipants.
   * @param {EventParticipantDeleteManyArgs} args - Arguments to filter EventParticipants to delete.
   * @example
   * // Delete a few EventParticipants
   * const { count } = await prisma.eventParticipant.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EventParticipantDeleteManyArgs>(args?: Prisma.SelectSubset<T, EventParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EventParticipants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventParticipantUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EventParticipants
   * const eventParticipant = await prisma.eventParticipant.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EventParticipantUpdateManyArgs>(args: Prisma.SelectSubset<T, EventParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one EventParticipant.
   * @param {EventParticipantUpsertArgs} args - Arguments to update or create a EventParticipant.
   * @example
   * // Update or create a EventParticipant
   * const eventParticipant = await prisma.eventParticipant.upsert({
   *   create: {
   *     // ... data to create a EventParticipant
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EventParticipant we want to update
   *   }
   * })
   */
  upsert<T extends EventParticipantUpsertArgs>(args: Prisma.SelectSubset<T, EventParticipantUpsertArgs<ExtArgs>>): Prisma.Prisma__EventParticipantClient<runtime.Types.Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EventParticipants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventParticipantCountArgs} args - Arguments to filter EventParticipants to count.
   * @example
   * // Count the number of EventParticipants
   * const count = await prisma.eventParticipant.count({
   *   where: {
   *     // ... the filter for the EventParticipants we want to count
   *   }
   * })
  **/
  count<T extends EventParticipantCountArgs>(
    args?: Prisma.Subset<T, EventParticipantCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EventParticipantCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EventParticipant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EventParticipantAggregateArgs>(args: Prisma.Subset<T, EventParticipantAggregateArgs>): Prisma.PrismaPromise<GetEventParticipantAggregateType<T>>

  /**
   * Group by EventParticipant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventParticipantGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EventParticipantGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EventParticipantGroupByArgs['orderBy'] }
      : { orderBy?: EventParticipantGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EventParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EventParticipant model
 */
readonly fields: EventParticipantFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EventParticipant.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EventParticipantClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  event<T extends Prisma.EventDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EventDefaultArgs<ExtArgs>>): Prisma.Prisma__EventClient<runtime.Types.Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  participant<T extends Prisma.ParticipantDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ParticipantDefaultArgs<ExtArgs>>): Prisma.Prisma__ParticipantClient<runtime.Types.Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EventParticipant model
 */
export interface EventParticipantFieldRefs {
  readonly id: Prisma.FieldRef<"EventParticipant", 'String'>
  readonly eventId: Prisma.FieldRef<"EventParticipant", 'String'>
  readonly participantId: Prisma.FieldRef<"EventParticipant", 'String'>
}
    

// Custom InputTypes
/**
 * EventParticipant findUnique
 */
export type EventParticipantFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventParticipant
   */
  select?: Prisma.EventParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventParticipant
   */
  omit?: Prisma.EventParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventParticipantInclude<ExtArgs> | null
  /**
   * Filter, which EventParticipant to fetch.
   */
  where: Prisma.EventParticipantWhereUniqueInput
}

/**
 * EventParticipant findUniqueOrThrow
 */
export type EventParticipantFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventParticipant
   */
  select?: Prisma.EventParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventParticipant
   */
  omit?: Prisma.EventParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventParticipantInclude<ExtArgs> | null
  /**
   * Filter, which EventParticipant to fetch.
   */
  where: Prisma.EventParticipantWhereUniqueInput
}

/**
 * EventParticipant findFirst
 */
export type EventParticipantFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventParticipant
   */
  select?: Prisma.EventParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventParticipant
   */
  omit?: Prisma.EventParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventParticipantInclude<ExtArgs> | null
  /**
   * Filter, which EventParticipant to fetch.
   */
  where?: Prisma.EventParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EventParticipants to fetch.
   */
  orderBy?: Prisma.EventParticipantOrderByWithRelationInput | Prisma.EventParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EventParticipants.
   */
  cursor?: Prisma.EventParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EventParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EventParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EventParticipants.
   */
  distinct?: Prisma.EventParticipantScalarFieldEnum | Prisma.EventParticipantScalarFieldEnum[]
}

/**
 * EventParticipant findFirstOrThrow
 */
export type EventParticipantFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventParticipant
   */
  select?: Prisma.EventParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventParticipant
   */
  omit?: Prisma.EventParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventParticipantInclude<ExtArgs> | null
  /**
   * Filter, which EventParticipant to fetch.
   */
  where?: Prisma.EventParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EventParticipants to fetch.
   */
  orderBy?: Prisma.EventParticipantOrderByWithRelationInput | Prisma.EventParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EventParticipants.
   */
  cursor?: Prisma.EventParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EventParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EventParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EventParticipants.
   */
  distinct?: Prisma.EventParticipantScalarFieldEnum | Prisma.EventParticipantScalarFieldEnum[]
}

/**
 * EventParticipant findMany
 */
export type EventParticipantFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventParticipant
   */
  select?: Prisma.EventParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventParticipant
   */
  omit?: Prisma.EventParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventParticipantInclude<ExtArgs> | null
  /**
   * Filter, which EventParticipants to fetch.
   */
  where?: Prisma.EventParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EventParticipants to fetch.
   */
  orderBy?: Prisma.EventParticipantOrderByWithRelationInput | Prisma.EventParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EventParticipants.
   */
  cursor?: Prisma.EventParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EventParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EventParticipants.
   */
  skip?: number
  distinct?: Prisma.EventParticipantScalarFieldEnum | Prisma.EventParticipantScalarFieldEnum[]
}

/**
 * EventParticipant create
 */
export type EventParticipantCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventParticipant
   */
  select?: Prisma.EventParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventParticipant
   */
  omit?: Prisma.EventParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventParticipantInclude<ExtArgs> | null
  /**
   * The data needed to create a EventParticipant.
   */
  data: Prisma.XOR<Prisma.EventParticipantCreateInput, Prisma.EventParticipantUncheckedCreateInput>
}

/**
 * EventParticipant createMany
 */
export type EventParticipantCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EventParticipants.
   */
  data: Prisma.EventParticipantCreateManyInput | Prisma.EventParticipantCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * EventParticipant update
 */
export type EventParticipantUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventParticipant
   */
  select?: Prisma.EventParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventParticipant
   */
  omit?: Prisma.EventParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventParticipantInclude<ExtArgs> | null
  /**
   * The data needed to update a EventParticipant.
   */
  data: Prisma.XOR<Prisma.EventParticipantUpdateInput, Prisma.EventParticipantUncheckedUpdateInput>
  /**
   * Choose, which EventParticipant to update.
   */
  where: Prisma.EventParticipantWhereUniqueInput
}

/**
 * EventParticipant updateMany
 */
export type EventParticipantUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EventParticipants.
   */
  data: Prisma.XOR<Prisma.EventParticipantUpdateManyMutationInput, Prisma.EventParticipantUncheckedUpdateManyInput>
  /**
   * Filter which EventParticipants to update
   */
  where?: Prisma.EventParticipantWhereInput
  /**
   * Limit how many EventParticipants to update.
   */
  limit?: number
}

/**
 * EventParticipant upsert
 */
export type EventParticipantUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventParticipant
   */
  select?: Prisma.EventParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventParticipant
   */
  omit?: Prisma.EventParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventParticipantInclude<ExtArgs> | null
  /**
   * The filter to search for the EventParticipant to update in case it exists.
   */
  where: Prisma.EventParticipantWhereUniqueInput
  /**
   * In case the EventParticipant found by the `where` argument doesn't exist, create a new EventParticipant with this data.
   */
  create: Prisma.XOR<Prisma.EventParticipantCreateInput, Prisma.EventParticipantUncheckedCreateInput>
  /**
   * In case the EventParticipant was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EventParticipantUpdateInput, Prisma.EventParticipantUncheckedUpdateInput>
}

/**
 * EventParticipant delete
 */
export type EventParticipantDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventParticipant
   */
  select?: Prisma.EventParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventParticipant
   */
  omit?: Prisma.EventParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventParticipantInclude<ExtArgs> | null
  /**
   * Filter which EventParticipant to delete.
   */
  where: Prisma.EventParticipantWhereUniqueInput
}

/**
 * EventParticipant deleteMany
 */
export type EventParticipantDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EventParticipants to delete
   */
  where?: Prisma.EventParticipantWhereInput
  /**
   * Limit how many EventParticipants to delete.
   */
  limit?: number
}

/**
 * EventParticipant without action
 */
export type EventParticipantDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventParticipant
   */
  select?: Prisma.EventParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventParticipant
   */
  omit?: Prisma.EventParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventParticipantInclude<ExtArgs> | null
}
