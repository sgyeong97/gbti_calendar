
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `RecurringSlot` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model RecurringSlot
 * 
 */
export type RecurringSlotModel = runtime.Types.Result.DefaultSelection<Prisma.$RecurringSlotPayload>

export type AggregateRecurringSlot = {
  _count: RecurringSlotCountAggregateOutputType | null
  _avg: RecurringSlotAvgAggregateOutputType | null
  _sum: RecurringSlotSumAggregateOutputType | null
  _min: RecurringSlotMinAggregateOutputType | null
  _max: RecurringSlotMaxAggregateOutputType | null
}

export type RecurringSlotAvgAggregateOutputType = {
  dayOfWeek: number | null
  startMinutes: number | null
  endMinutes: number | null
}

export type RecurringSlotSumAggregateOutputType = {
  dayOfWeek: number | null
  startMinutes: number | null
  endMinutes: number | null
}

export type RecurringSlotMinAggregateOutputType = {
  id: string | null
  calendarId: string | null
  dayOfWeek: number | null
  startMinutes: number | null
  endMinutes: number | null
  startsOn: Date | null
  endsOn: Date | null
  eventTitle: string | null
  eventStartDate: Date | null
  participantNames: string | null
  color: string | null
}

export type RecurringSlotMaxAggregateOutputType = {
  id: string | null
  calendarId: string | null
  dayOfWeek: number | null
  startMinutes: number | null
  endMinutes: number | null
  startsOn: Date | null
  endsOn: Date | null
  eventTitle: string | null
  eventStartDate: Date | null
  participantNames: string | null
  color: string | null
}

export type RecurringSlotCountAggregateOutputType = {
  id: number
  calendarId: number
  dayOfWeek: number
  startMinutes: number
  endMinutes: number
  startsOn: number
  endsOn: number
  eventTitle: number
  eventStartDate: number
  participantNames: number
  color: number
  _all: number
}


export type RecurringSlotAvgAggregateInputType = {
  dayOfWeek?: true
  startMinutes?: true
  endMinutes?: true
}

export type RecurringSlotSumAggregateInputType = {
  dayOfWeek?: true
  startMinutes?: true
  endMinutes?: true
}

export type RecurringSlotMinAggregateInputType = {
  id?: true
  calendarId?: true
  dayOfWeek?: true
  startMinutes?: true
  endMinutes?: true
  startsOn?: true
  endsOn?: true
  eventTitle?: true
  eventStartDate?: true
  participantNames?: true
  color?: true
}

export type RecurringSlotMaxAggregateInputType = {
  id?: true
  calendarId?: true
  dayOfWeek?: true
  startMinutes?: true
  endMinutes?: true
  startsOn?: true
  endsOn?: true
  eventTitle?: true
  eventStartDate?: true
  participantNames?: true
  color?: true
}

export type RecurringSlotCountAggregateInputType = {
  id?: true
  calendarId?: true
  dayOfWeek?: true
  startMinutes?: true
  endMinutes?: true
  startsOn?: true
  endsOn?: true
  eventTitle?: true
  eventStartDate?: true
  participantNames?: true
  color?: true
  _all?: true
}

export type RecurringSlotAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RecurringSlot to aggregate.
   */
  where?: Prisma.RecurringSlotWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RecurringSlots to fetch.
   */
  orderBy?: Prisma.RecurringSlotOrderByWithRelationInput | Prisma.RecurringSlotOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RecurringSlotWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RecurringSlots from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RecurringSlots.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned RecurringSlots
  **/
  _count?: true | RecurringSlotCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RecurringSlotAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RecurringSlotSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RecurringSlotMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RecurringSlotMaxAggregateInputType
}

export type GetRecurringSlotAggregateType<T extends RecurringSlotAggregateArgs> = {
      [P in keyof T & keyof AggregateRecurringSlot]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRecurringSlot[P]>
    : Prisma.GetScalarType<T[P], AggregateRecurringSlot[P]>
}




export type RecurringSlotGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RecurringSlotWhereInput
  orderBy?: Prisma.RecurringSlotOrderByWithAggregationInput | Prisma.RecurringSlotOrderByWithAggregationInput[]
  by: Prisma.RecurringSlotScalarFieldEnum[] | Prisma.RecurringSlotScalarFieldEnum
  having?: Prisma.RecurringSlotScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RecurringSlotCountAggregateInputType | true
  _avg?: RecurringSlotAvgAggregateInputType
  _sum?: RecurringSlotSumAggregateInputType
  _min?: RecurringSlotMinAggregateInputType
  _max?: RecurringSlotMaxAggregateInputType
}

export type RecurringSlotGroupByOutputType = {
  id: string
  calendarId: string
  dayOfWeek: number
  startMinutes: number
  endMinutes: number
  startsOn: Date
  endsOn: Date | null
  eventTitle: string
  eventStartDate: Date
  participantNames: string | null
  color: string
  _count: RecurringSlotCountAggregateOutputType | null
  _avg: RecurringSlotAvgAggregateOutputType | null
  _sum: RecurringSlotSumAggregateOutputType | null
  _min: RecurringSlotMinAggregateOutputType | null
  _max: RecurringSlotMaxAggregateOutputType | null
}

type GetRecurringSlotGroupByPayload<T extends RecurringSlotGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RecurringSlotGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RecurringSlotGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RecurringSlotGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RecurringSlotGroupByOutputType[P]>
      }
    >
  >



export type RecurringSlotWhereInput = {
  AND?: Prisma.RecurringSlotWhereInput | Prisma.RecurringSlotWhereInput[]
  OR?: Prisma.RecurringSlotWhereInput[]
  NOT?: Prisma.RecurringSlotWhereInput | Prisma.RecurringSlotWhereInput[]
  id?: Prisma.StringFilter<"RecurringSlot"> | string
  calendarId?: Prisma.StringFilter<"RecurringSlot"> | string
  dayOfWeek?: Prisma.IntFilter<"RecurringSlot"> | number
  startMinutes?: Prisma.IntFilter<"RecurringSlot"> | number
  endMinutes?: Prisma.IntFilter<"RecurringSlot"> | number
  startsOn?: Prisma.DateTimeFilter<"RecurringSlot"> | Date | string
  endsOn?: Prisma.DateTimeNullableFilter<"RecurringSlot"> | Date | string | null
  eventTitle?: Prisma.StringFilter<"RecurringSlot"> | string
  eventStartDate?: Prisma.DateTimeFilter<"RecurringSlot"> | Date | string
  participantNames?: Prisma.StringNullableFilter<"RecurringSlot"> | string | null
  color?: Prisma.StringFilter<"RecurringSlot"> | string
  calendar?: Prisma.XOR<Prisma.CalendarScalarRelationFilter, Prisma.CalendarWhereInput>
}

export type RecurringSlotOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  calendarId?: Prisma.SortOrder
  dayOfWeek?: Prisma.SortOrder
  startMinutes?: Prisma.SortOrder
  endMinutes?: Prisma.SortOrder
  startsOn?: Prisma.SortOrder
  endsOn?: Prisma.SortOrderInput | Prisma.SortOrder
  eventTitle?: Prisma.SortOrder
  eventStartDate?: Prisma.SortOrder
  participantNames?: Prisma.SortOrderInput | Prisma.SortOrder
  color?: Prisma.SortOrder
  calendar?: Prisma.CalendarOrderByWithRelationInput
}

export type RecurringSlotWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.RecurringSlotWhereInput | Prisma.RecurringSlotWhereInput[]
  OR?: Prisma.RecurringSlotWhereInput[]
  NOT?: Prisma.RecurringSlotWhereInput | Prisma.RecurringSlotWhereInput[]
  calendarId?: Prisma.StringFilter<"RecurringSlot"> | string
  dayOfWeek?: Prisma.IntFilter<"RecurringSlot"> | number
  startMinutes?: Prisma.IntFilter<"RecurringSlot"> | number
  endMinutes?: Prisma.IntFilter<"RecurringSlot"> | number
  startsOn?: Prisma.DateTimeFilter<"RecurringSlot"> | Date | string
  endsOn?: Prisma.DateTimeNullableFilter<"RecurringSlot"> | Date | string | null
  eventTitle?: Prisma.StringFilter<"RecurringSlot"> | string
  eventStartDate?: Prisma.DateTimeFilter<"RecurringSlot"> | Date | string
  participantNames?: Prisma.StringNullableFilter<"RecurringSlot"> | string | null
  color?: Prisma.StringFilter<"RecurringSlot"> | string
  calendar?: Prisma.XOR<Prisma.CalendarScalarRelationFilter, Prisma.CalendarWhereInput>
}, "id">

export type RecurringSlotOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  calendarId?: Prisma.SortOrder
  dayOfWeek?: Prisma.SortOrder
  startMinutes?: Prisma.SortOrder
  endMinutes?: Prisma.SortOrder
  startsOn?: Prisma.SortOrder
  endsOn?: Prisma.SortOrderInput | Prisma.SortOrder
  eventTitle?: Prisma.SortOrder
  eventStartDate?: Prisma.SortOrder
  participantNames?: Prisma.SortOrderInput | Prisma.SortOrder
  color?: Prisma.SortOrder
  _count?: Prisma.RecurringSlotCountOrderByAggregateInput
  _avg?: Prisma.RecurringSlotAvgOrderByAggregateInput
  _max?: Prisma.RecurringSlotMaxOrderByAggregateInput
  _min?: Prisma.RecurringSlotMinOrderByAggregateInput
  _sum?: Prisma.RecurringSlotSumOrderByAggregateInput
}

export type RecurringSlotScalarWhereWithAggregatesInput = {
  AND?: Prisma.RecurringSlotScalarWhereWithAggregatesInput | Prisma.RecurringSlotScalarWhereWithAggregatesInput[]
  OR?: Prisma.RecurringSlotScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RecurringSlotScalarWhereWithAggregatesInput | Prisma.RecurringSlotScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"RecurringSlot"> | string
  calendarId?: Prisma.StringWithAggregatesFilter<"RecurringSlot"> | string
  dayOfWeek?: Prisma.IntWithAggregatesFilter<"RecurringSlot"> | number
  startMinutes?: Prisma.IntWithAggregatesFilter<"RecurringSlot"> | number
  endMinutes?: Prisma.IntWithAggregatesFilter<"RecurringSlot"> | number
  startsOn?: Prisma.DateTimeWithAggregatesFilter<"RecurringSlot"> | Date | string
  endsOn?: Prisma.DateTimeNullableWithAggregatesFilter<"RecurringSlot"> | Date | string | null
  eventTitle?: Prisma.StringWithAggregatesFilter<"RecurringSlot"> | string
  eventStartDate?: Prisma.DateTimeWithAggregatesFilter<"RecurringSlot"> | Date | string
  participantNames?: Prisma.StringNullableWithAggregatesFilter<"RecurringSlot"> | string | null
  color?: Prisma.StringWithAggregatesFilter<"RecurringSlot"> | string
}

export type RecurringSlotCreateInput = {
  id?: string
  dayOfWeek: number
  startMinutes: number
  endMinutes: number
  startsOn?: Date | string
  endsOn?: Date | string | null
  eventTitle: string
  eventStartDate: Date | string
  participantNames?: string | null
  color?: string
  calendar: Prisma.CalendarCreateNestedOneWithoutRecurringSlotsInput
}

export type RecurringSlotUncheckedCreateInput = {
  id?: string
  calendarId: string
  dayOfWeek: number
  startMinutes: number
  endMinutes: number
  startsOn?: Date | string
  endsOn?: Date | string | null
  eventTitle: string
  eventStartDate: Date | string
  participantNames?: string | null
  color?: string
}

export type RecurringSlotUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.IntFieldUpdateOperationsInput | number
  startMinutes?: Prisma.IntFieldUpdateOperationsInput | number
  endMinutes?: Prisma.IntFieldUpdateOperationsInput | number
  startsOn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endsOn?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  eventTitle?: Prisma.StringFieldUpdateOperationsInput | string
  eventStartDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  participantNames?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  color?: Prisma.StringFieldUpdateOperationsInput | string
  calendar?: Prisma.CalendarUpdateOneRequiredWithoutRecurringSlotsNestedInput
}

export type RecurringSlotUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  calendarId?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.IntFieldUpdateOperationsInput | number
  startMinutes?: Prisma.IntFieldUpdateOperationsInput | number
  endMinutes?: Prisma.IntFieldUpdateOperationsInput | number
  startsOn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endsOn?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  eventTitle?: Prisma.StringFieldUpdateOperationsInput | string
  eventStartDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  participantNames?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  color?: Prisma.StringFieldUpdateOperationsInput | string
}

export type RecurringSlotCreateManyInput = {
  id?: string
  calendarId: string
  dayOfWeek: number
  startMinutes: number
  endMinutes: number
  startsOn?: Date | string
  endsOn?: Date | string | null
  eventTitle: string
  eventStartDate: Date | string
  participantNames?: string | null
  color?: string
}

export type RecurringSlotUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.IntFieldUpdateOperationsInput | number
  startMinutes?: Prisma.IntFieldUpdateOperationsInput | number
  endMinutes?: Prisma.IntFieldUpdateOperationsInput | number
  startsOn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endsOn?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  eventTitle?: Prisma.StringFieldUpdateOperationsInput | string
  eventStartDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  participantNames?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  color?: Prisma.StringFieldUpdateOperationsInput | string
}

export type RecurringSlotUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  calendarId?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.IntFieldUpdateOperationsInput | number
  startMinutes?: Prisma.IntFieldUpdateOperationsInput | number
  endMinutes?: Prisma.IntFieldUpdateOperationsInput | number
  startsOn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endsOn?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  eventTitle?: Prisma.StringFieldUpdateOperationsInput | string
  eventStartDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  participantNames?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  color?: Prisma.StringFieldUpdateOperationsInput | string
}

export type RecurringSlotListRelationFilter = {
  every?: Prisma.RecurringSlotWhereInput
  some?: Prisma.RecurringSlotWhereInput
  none?: Prisma.RecurringSlotWhereInput
}

export type RecurringSlotOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type RecurringSlotCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  calendarId?: Prisma.SortOrder
  dayOfWeek?: Prisma.SortOrder
  startMinutes?: Prisma.SortOrder
  endMinutes?: Prisma.SortOrder
  startsOn?: Prisma.SortOrder
  endsOn?: Prisma.SortOrder
  eventTitle?: Prisma.SortOrder
  eventStartDate?: Prisma.SortOrder
  participantNames?: Prisma.SortOrder
  color?: Prisma.SortOrder
}

export type RecurringSlotAvgOrderByAggregateInput = {
  dayOfWeek?: Prisma.SortOrder
  startMinutes?: Prisma.SortOrder
  endMinutes?: Prisma.SortOrder
}

export type RecurringSlotMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  calendarId?: Prisma.SortOrder
  dayOfWeek?: Prisma.SortOrder
  startMinutes?: Prisma.SortOrder
  endMinutes?: Prisma.SortOrder
  startsOn?: Prisma.SortOrder
  endsOn?: Prisma.SortOrder
  eventTitle?: Prisma.SortOrder
  eventStartDate?: Prisma.SortOrder
  participantNames?: Prisma.SortOrder
  color?: Prisma.SortOrder
}

export type RecurringSlotMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  calendarId?: Prisma.SortOrder
  dayOfWeek?: Prisma.SortOrder
  startMinutes?: Prisma.SortOrder
  endMinutes?: Prisma.SortOrder
  startsOn?: Prisma.SortOrder
  endsOn?: Prisma.SortOrder
  eventTitle?: Prisma.SortOrder
  eventStartDate?: Prisma.SortOrder
  participantNames?: Prisma.SortOrder
  color?: Prisma.SortOrder
}

export type RecurringSlotSumOrderByAggregateInput = {
  dayOfWeek?: Prisma.SortOrder
  startMinutes?: Prisma.SortOrder
  endMinutes?: Prisma.SortOrder
}

export type RecurringSlotCreateNestedManyWithoutCalendarInput = {
  create?: Prisma.XOR<Prisma.RecurringSlotCreateWithoutCalendarInput, Prisma.RecurringSlotUncheckedCreateWithoutCalendarInput> | Prisma.RecurringSlotCreateWithoutCalendarInput[] | Prisma.RecurringSlotUncheckedCreateWithoutCalendarInput[]
  connectOrCreate?: Prisma.RecurringSlotCreateOrConnectWithoutCalendarInput | Prisma.RecurringSlotCreateOrConnectWithoutCalendarInput[]
  createMany?: Prisma.RecurringSlotCreateManyCalendarInputEnvelope
  connect?: Prisma.RecurringSlotWhereUniqueInput | Prisma.RecurringSlotWhereUniqueInput[]
}

export type RecurringSlotUncheckedCreateNestedManyWithoutCalendarInput = {
  create?: Prisma.XOR<Prisma.RecurringSlotCreateWithoutCalendarInput, Prisma.RecurringSlotUncheckedCreateWithoutCalendarInput> | Prisma.RecurringSlotCreateWithoutCalendarInput[] | Prisma.RecurringSlotUncheckedCreateWithoutCalendarInput[]
  connectOrCreate?: Prisma.RecurringSlotCreateOrConnectWithoutCalendarInput | Prisma.RecurringSlotCreateOrConnectWithoutCalendarInput[]
  createMany?: Prisma.RecurringSlotCreateManyCalendarInputEnvelope
  connect?: Prisma.RecurringSlotWhereUniqueInput | Prisma.RecurringSlotWhereUniqueInput[]
}

export type RecurringSlotUpdateManyWithoutCalendarNestedInput = {
  create?: Prisma.XOR<Prisma.RecurringSlotCreateWithoutCalendarInput, Prisma.RecurringSlotUncheckedCreateWithoutCalendarInput> | Prisma.RecurringSlotCreateWithoutCalendarInput[] | Prisma.RecurringSlotUncheckedCreateWithoutCalendarInput[]
  connectOrCreate?: Prisma.RecurringSlotCreateOrConnectWithoutCalendarInput | Prisma.RecurringSlotCreateOrConnectWithoutCalendarInput[]
  upsert?: Prisma.RecurringSlotUpsertWithWhereUniqueWithoutCalendarInput | Prisma.RecurringSlotUpsertWithWhereUniqueWithoutCalendarInput[]
  createMany?: Prisma.RecurringSlotCreateManyCalendarInputEnvelope
  set?: Prisma.RecurringSlotWhereUniqueInput | Prisma.RecurringSlotWhereUniqueInput[]
  disconnect?: Prisma.RecurringSlotWhereUniqueInput | Prisma.RecurringSlotWhereUniqueInput[]
  delete?: Prisma.RecurringSlotWhereUniqueInput | Prisma.RecurringSlotWhereUniqueInput[]
  connect?: Prisma.RecurringSlotWhereUniqueInput | Prisma.RecurringSlotWhereUniqueInput[]
  update?: Prisma.RecurringSlotUpdateWithWhereUniqueWithoutCalendarInput | Prisma.RecurringSlotUpdateWithWhereUniqueWithoutCalendarInput[]
  updateMany?: Prisma.RecurringSlotUpdateManyWithWhereWithoutCalendarInput | Prisma.RecurringSlotUpdateManyWithWhereWithoutCalendarInput[]
  deleteMany?: Prisma.RecurringSlotScalarWhereInput | Prisma.RecurringSlotScalarWhereInput[]
}

export type RecurringSlotUncheckedUpdateManyWithoutCalendarNestedInput = {
  create?: Prisma.XOR<Prisma.RecurringSlotCreateWithoutCalendarInput, Prisma.RecurringSlotUncheckedCreateWithoutCalendarInput> | Prisma.RecurringSlotCreateWithoutCalendarInput[] | Prisma.RecurringSlotUncheckedCreateWithoutCalendarInput[]
  connectOrCreate?: Prisma.RecurringSlotCreateOrConnectWithoutCalendarInput | Prisma.RecurringSlotCreateOrConnectWithoutCalendarInput[]
  upsert?: Prisma.RecurringSlotUpsertWithWhereUniqueWithoutCalendarInput | Prisma.RecurringSlotUpsertWithWhereUniqueWithoutCalendarInput[]
  createMany?: Prisma.RecurringSlotCreateManyCalendarInputEnvelope
  set?: Prisma.RecurringSlotWhereUniqueInput | Prisma.RecurringSlotWhereUniqueInput[]
  disconnect?: Prisma.RecurringSlotWhereUniqueInput | Prisma.RecurringSlotWhereUniqueInput[]
  delete?: Prisma.RecurringSlotWhereUniqueInput | Prisma.RecurringSlotWhereUniqueInput[]
  connect?: Prisma.RecurringSlotWhereUniqueInput | Prisma.RecurringSlotWhereUniqueInput[]
  update?: Prisma.RecurringSlotUpdateWithWhereUniqueWithoutCalendarInput | Prisma.RecurringSlotUpdateWithWhereUniqueWithoutCalendarInput[]
  updateMany?: Prisma.RecurringSlotUpdateManyWithWhereWithoutCalendarInput | Prisma.RecurringSlotUpdateManyWithWhereWithoutCalendarInput[]
  deleteMany?: Prisma.RecurringSlotScalarWhereInput | Prisma.RecurringSlotScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type RecurringSlotCreateWithoutCalendarInput = {
  id?: string
  dayOfWeek: number
  startMinutes: number
  endMinutes: number
  startsOn?: Date | string
  endsOn?: Date | string | null
  eventTitle: string
  eventStartDate: Date | string
  participantNames?: string | null
  color?: string
}

export type RecurringSlotUncheckedCreateWithoutCalendarInput = {
  id?: string
  dayOfWeek: number
  startMinutes: number
  endMinutes: number
  startsOn?: Date | string
  endsOn?: Date | string | null
  eventTitle: string
  eventStartDate: Date | string
  participantNames?: string | null
  color?: string
}

export type RecurringSlotCreateOrConnectWithoutCalendarInput = {
  where: Prisma.RecurringSlotWhereUniqueInput
  create: Prisma.XOR<Prisma.RecurringSlotCreateWithoutCalendarInput, Prisma.RecurringSlotUncheckedCreateWithoutCalendarInput>
}

export type RecurringSlotCreateManyCalendarInputEnvelope = {
  data: Prisma.RecurringSlotCreateManyCalendarInput | Prisma.RecurringSlotCreateManyCalendarInput[]
  skipDuplicates?: boolean
}

export type RecurringSlotUpsertWithWhereUniqueWithoutCalendarInput = {
  where: Prisma.RecurringSlotWhereUniqueInput
  update: Prisma.XOR<Prisma.RecurringSlotUpdateWithoutCalendarInput, Prisma.RecurringSlotUncheckedUpdateWithoutCalendarInput>
  create: Prisma.XOR<Prisma.RecurringSlotCreateWithoutCalendarInput, Prisma.RecurringSlotUncheckedCreateWithoutCalendarInput>
}

export type RecurringSlotUpdateWithWhereUniqueWithoutCalendarInput = {
  where: Prisma.RecurringSlotWhereUniqueInput
  data: Prisma.XOR<Prisma.RecurringSlotUpdateWithoutCalendarInput, Prisma.RecurringSlotUncheckedUpdateWithoutCalendarInput>
}

export type RecurringSlotUpdateManyWithWhereWithoutCalendarInput = {
  where: Prisma.RecurringSlotScalarWhereInput
  data: Prisma.XOR<Prisma.RecurringSlotUpdateManyMutationInput, Prisma.RecurringSlotUncheckedUpdateManyWithoutCalendarInput>
}

export type RecurringSlotScalarWhereInput = {
  AND?: Prisma.RecurringSlotScalarWhereInput | Prisma.RecurringSlotScalarWhereInput[]
  OR?: Prisma.RecurringSlotScalarWhereInput[]
  NOT?: Prisma.RecurringSlotScalarWhereInput | Prisma.RecurringSlotScalarWhereInput[]
  id?: Prisma.StringFilter<"RecurringSlot"> | string
  calendarId?: Prisma.StringFilter<"RecurringSlot"> | string
  dayOfWeek?: Prisma.IntFilter<"RecurringSlot"> | number
  startMinutes?: Prisma.IntFilter<"RecurringSlot"> | number
  endMinutes?: Prisma.IntFilter<"RecurringSlot"> | number
  startsOn?: Prisma.DateTimeFilter<"RecurringSlot"> | Date | string
  endsOn?: Prisma.DateTimeNullableFilter<"RecurringSlot"> | Date | string | null
  eventTitle?: Prisma.StringFilter<"RecurringSlot"> | string
  eventStartDate?: Prisma.DateTimeFilter<"RecurringSlot"> | Date | string
  participantNames?: Prisma.StringNullableFilter<"RecurringSlot"> | string | null
  color?: Prisma.StringFilter<"RecurringSlot"> | string
}

export type RecurringSlotCreateManyCalendarInput = {
  id?: string
  dayOfWeek: number
  startMinutes: number
  endMinutes: number
  startsOn?: Date | string
  endsOn?: Date | string | null
  eventTitle: string
  eventStartDate: Date | string
  participantNames?: string | null
  color?: string
}

export type RecurringSlotUpdateWithoutCalendarInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.IntFieldUpdateOperationsInput | number
  startMinutes?: Prisma.IntFieldUpdateOperationsInput | number
  endMinutes?: Prisma.IntFieldUpdateOperationsInput | number
  startsOn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endsOn?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  eventTitle?: Prisma.StringFieldUpdateOperationsInput | string
  eventStartDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  participantNames?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  color?: Prisma.StringFieldUpdateOperationsInput | string
}

export type RecurringSlotUncheckedUpdateWithoutCalendarInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.IntFieldUpdateOperationsInput | number
  startMinutes?: Prisma.IntFieldUpdateOperationsInput | number
  endMinutes?: Prisma.IntFieldUpdateOperationsInput | number
  startsOn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endsOn?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  eventTitle?: Prisma.StringFieldUpdateOperationsInput | string
  eventStartDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  participantNames?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  color?: Prisma.StringFieldUpdateOperationsInput | string
}

export type RecurringSlotUncheckedUpdateManyWithoutCalendarInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.IntFieldUpdateOperationsInput | number
  startMinutes?: Prisma.IntFieldUpdateOperationsInput | number
  endMinutes?: Prisma.IntFieldUpdateOperationsInput | number
  startsOn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endsOn?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  eventTitle?: Prisma.StringFieldUpdateOperationsInput | string
  eventStartDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  participantNames?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  color?: Prisma.StringFieldUpdateOperationsInput | string
}



export type RecurringSlotSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  calendarId?: boolean
  dayOfWeek?: boolean
  startMinutes?: boolean
  endMinutes?: boolean
  startsOn?: boolean
  endsOn?: boolean
  eventTitle?: boolean
  eventStartDate?: boolean
  participantNames?: boolean
  color?: boolean
  calendar?: boolean | Prisma.CalendarDefaultArgs<ExtArgs>
}, ExtArgs["result"]["recurringSlot"]>

export type RecurringSlotSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  calendarId?: boolean
  dayOfWeek?: boolean
  startMinutes?: boolean
  endMinutes?: boolean
  startsOn?: boolean
  endsOn?: boolean
  eventTitle?: boolean
  eventStartDate?: boolean
  participantNames?: boolean
  color?: boolean
  calendar?: boolean | Prisma.CalendarDefaultArgs<ExtArgs>
}, ExtArgs["result"]["recurringSlot"]>

export type RecurringSlotSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  calendarId?: boolean
  dayOfWeek?: boolean
  startMinutes?: boolean
  endMinutes?: boolean
  startsOn?: boolean
  endsOn?: boolean
  eventTitle?: boolean
  eventStartDate?: boolean
  participantNames?: boolean
  color?: boolean
  calendar?: boolean | Prisma.CalendarDefaultArgs<ExtArgs>
}, ExtArgs["result"]["recurringSlot"]>

export type RecurringSlotSelectScalar = {
  id?: boolean
  calendarId?: boolean
  dayOfWeek?: boolean
  startMinutes?: boolean
  endMinutes?: boolean
  startsOn?: boolean
  endsOn?: boolean
  eventTitle?: boolean
  eventStartDate?: boolean
  participantNames?: boolean
  color?: boolean
}

export type RecurringSlotOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "calendarId" | "dayOfWeek" | "startMinutes" | "endMinutes" | "startsOn" | "endsOn" | "eventTitle" | "eventStartDate" | "participantNames" | "color", ExtArgs["result"]["recurringSlot"]>
export type RecurringSlotInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  calendar?: boolean | Prisma.CalendarDefaultArgs<ExtArgs>
}
export type RecurringSlotIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  calendar?: boolean | Prisma.CalendarDefaultArgs<ExtArgs>
}
export type RecurringSlotIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  calendar?: boolean | Prisma.CalendarDefaultArgs<ExtArgs>
}

export type $RecurringSlotPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "RecurringSlot"
  objects: {
    calendar: Prisma.$CalendarPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    calendarId: string
    dayOfWeek: number
    startMinutes: number
    endMinutes: number
    startsOn: Date
    endsOn: Date | null
    eventTitle: string
    eventStartDate: Date
    participantNames: string | null
    color: string
  }, ExtArgs["result"]["recurringSlot"]>
  composites: {}
}

export type RecurringSlotGetPayload<S extends boolean | null | undefined | RecurringSlotDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RecurringSlotPayload, S>

export type RecurringSlotCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RecurringSlotFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RecurringSlotCountAggregateInputType | true
  }

export interface RecurringSlotDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RecurringSlot'], meta: { name: 'RecurringSlot' } }
  /**
   * Find zero or one RecurringSlot that matches the filter.
   * @param {RecurringSlotFindUniqueArgs} args - Arguments to find a RecurringSlot
   * @example
   * // Get one RecurringSlot
   * const recurringSlot = await prisma.recurringSlot.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RecurringSlotFindUniqueArgs>(args: Prisma.SelectSubset<T, RecurringSlotFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RecurringSlotClient<runtime.Types.Result.GetResult<Prisma.$RecurringSlotPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one RecurringSlot that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RecurringSlotFindUniqueOrThrowArgs} args - Arguments to find a RecurringSlot
   * @example
   * // Get one RecurringSlot
   * const recurringSlot = await prisma.recurringSlot.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RecurringSlotFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RecurringSlotFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RecurringSlotClient<runtime.Types.Result.GetResult<Prisma.$RecurringSlotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RecurringSlot that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecurringSlotFindFirstArgs} args - Arguments to find a RecurringSlot
   * @example
   * // Get one RecurringSlot
   * const recurringSlot = await prisma.recurringSlot.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RecurringSlotFindFirstArgs>(args?: Prisma.SelectSubset<T, RecurringSlotFindFirstArgs<ExtArgs>>): Prisma.Prisma__RecurringSlotClient<runtime.Types.Result.GetResult<Prisma.$RecurringSlotPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RecurringSlot that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecurringSlotFindFirstOrThrowArgs} args - Arguments to find a RecurringSlot
   * @example
   * // Get one RecurringSlot
   * const recurringSlot = await prisma.recurringSlot.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RecurringSlotFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RecurringSlotFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RecurringSlotClient<runtime.Types.Result.GetResult<Prisma.$RecurringSlotPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more RecurringSlots that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecurringSlotFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all RecurringSlots
   * const recurringSlots = await prisma.recurringSlot.findMany()
   * 
   * // Get first 10 RecurringSlots
   * const recurringSlots = await prisma.recurringSlot.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const recurringSlotWithIdOnly = await prisma.recurringSlot.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RecurringSlotFindManyArgs>(args?: Prisma.SelectSubset<T, RecurringSlotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RecurringSlotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a RecurringSlot.
   * @param {RecurringSlotCreateArgs} args - Arguments to create a RecurringSlot.
   * @example
   * // Create one RecurringSlot
   * const RecurringSlot = await prisma.recurringSlot.create({
   *   data: {
   *     // ... data to create a RecurringSlot
   *   }
   * })
   * 
   */
  create<T extends RecurringSlotCreateArgs>(args: Prisma.SelectSubset<T, RecurringSlotCreateArgs<ExtArgs>>): Prisma.Prisma__RecurringSlotClient<runtime.Types.Result.GetResult<Prisma.$RecurringSlotPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many RecurringSlots.
   * @param {RecurringSlotCreateManyArgs} args - Arguments to create many RecurringSlots.
   * @example
   * // Create many RecurringSlots
   * const recurringSlot = await prisma.recurringSlot.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RecurringSlotCreateManyArgs>(args?: Prisma.SelectSubset<T, RecurringSlotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many RecurringSlots and returns the data saved in the database.
   * @param {RecurringSlotCreateManyAndReturnArgs} args - Arguments to create many RecurringSlots.
   * @example
   * // Create many RecurringSlots
   * const recurringSlot = await prisma.recurringSlot.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many RecurringSlots and only return the `id`
   * const recurringSlotWithIdOnly = await prisma.recurringSlot.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends RecurringSlotCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, RecurringSlotCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RecurringSlotPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a RecurringSlot.
   * @param {RecurringSlotDeleteArgs} args - Arguments to delete one RecurringSlot.
   * @example
   * // Delete one RecurringSlot
   * const RecurringSlot = await prisma.recurringSlot.delete({
   *   where: {
   *     // ... filter to delete one RecurringSlot
   *   }
   * })
   * 
   */
  delete<T extends RecurringSlotDeleteArgs>(args: Prisma.SelectSubset<T, RecurringSlotDeleteArgs<ExtArgs>>): Prisma.Prisma__RecurringSlotClient<runtime.Types.Result.GetResult<Prisma.$RecurringSlotPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one RecurringSlot.
   * @param {RecurringSlotUpdateArgs} args - Arguments to update one RecurringSlot.
   * @example
   * // Update one RecurringSlot
   * const recurringSlot = await prisma.recurringSlot.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RecurringSlotUpdateArgs>(args: Prisma.SelectSubset<T, RecurringSlotUpdateArgs<ExtArgs>>): Prisma.Prisma__RecurringSlotClient<runtime.Types.Result.GetResult<Prisma.$RecurringSlotPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more RecurringSlots.
   * @param {RecurringSlotDeleteManyArgs} args - Arguments to filter RecurringSlots to delete.
   * @example
   * // Delete a few RecurringSlots
   * const { count } = await prisma.recurringSlot.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RecurringSlotDeleteManyArgs>(args?: Prisma.SelectSubset<T, RecurringSlotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RecurringSlots.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecurringSlotUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many RecurringSlots
   * const recurringSlot = await prisma.recurringSlot.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RecurringSlotUpdateManyArgs>(args: Prisma.SelectSubset<T, RecurringSlotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RecurringSlots and returns the data updated in the database.
   * @param {RecurringSlotUpdateManyAndReturnArgs} args - Arguments to update many RecurringSlots.
   * @example
   * // Update many RecurringSlots
   * const recurringSlot = await prisma.recurringSlot.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more RecurringSlots and only return the `id`
   * const recurringSlotWithIdOnly = await prisma.recurringSlot.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends RecurringSlotUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, RecurringSlotUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RecurringSlotPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one RecurringSlot.
   * @param {RecurringSlotUpsertArgs} args - Arguments to update or create a RecurringSlot.
   * @example
   * // Update or create a RecurringSlot
   * const recurringSlot = await prisma.recurringSlot.upsert({
   *   create: {
   *     // ... data to create a RecurringSlot
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the RecurringSlot we want to update
   *   }
   * })
   */
  upsert<T extends RecurringSlotUpsertArgs>(args: Prisma.SelectSubset<T, RecurringSlotUpsertArgs<ExtArgs>>): Prisma.Prisma__RecurringSlotClient<runtime.Types.Result.GetResult<Prisma.$RecurringSlotPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of RecurringSlots.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecurringSlotCountArgs} args - Arguments to filter RecurringSlots to count.
   * @example
   * // Count the number of RecurringSlots
   * const count = await prisma.recurringSlot.count({
   *   where: {
   *     // ... the filter for the RecurringSlots we want to count
   *   }
   * })
  **/
  count<T extends RecurringSlotCountArgs>(
    args?: Prisma.Subset<T, RecurringSlotCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RecurringSlotCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a RecurringSlot.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecurringSlotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RecurringSlotAggregateArgs>(args: Prisma.Subset<T, RecurringSlotAggregateArgs>): Prisma.PrismaPromise<GetRecurringSlotAggregateType<T>>

  /**
   * Group by RecurringSlot.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RecurringSlotGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RecurringSlotGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RecurringSlotGroupByArgs['orderBy'] }
      : { orderBy?: RecurringSlotGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RecurringSlotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecurringSlotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the RecurringSlot model
 */
readonly fields: RecurringSlotFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for RecurringSlot.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RecurringSlotClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  calendar<T extends Prisma.CalendarDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CalendarDefaultArgs<ExtArgs>>): Prisma.Prisma__CalendarClient<runtime.Types.Result.GetResult<Prisma.$CalendarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the RecurringSlot model
 */
export interface RecurringSlotFieldRefs {
  readonly id: Prisma.FieldRef<"RecurringSlot", 'String'>
  readonly calendarId: Prisma.FieldRef<"RecurringSlot", 'String'>
  readonly dayOfWeek: Prisma.FieldRef<"RecurringSlot", 'Int'>
  readonly startMinutes: Prisma.FieldRef<"RecurringSlot", 'Int'>
  readonly endMinutes: Prisma.FieldRef<"RecurringSlot", 'Int'>
  readonly startsOn: Prisma.FieldRef<"RecurringSlot", 'DateTime'>
  readonly endsOn: Prisma.FieldRef<"RecurringSlot", 'DateTime'>
  readonly eventTitle: Prisma.FieldRef<"RecurringSlot", 'String'>
  readonly eventStartDate: Prisma.FieldRef<"RecurringSlot", 'DateTime'>
  readonly participantNames: Prisma.FieldRef<"RecurringSlot", 'String'>
  readonly color: Prisma.FieldRef<"RecurringSlot", 'String'>
}
    

// Custom InputTypes
/**
 * RecurringSlot findUnique
 */
export type RecurringSlotFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RecurringSlot
   */
  select?: Prisma.RecurringSlotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RecurringSlot
   */
  omit?: Prisma.RecurringSlotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecurringSlotInclude<ExtArgs> | null
  /**
   * Filter, which RecurringSlot to fetch.
   */
  where: Prisma.RecurringSlotWhereUniqueInput
}

/**
 * RecurringSlot findUniqueOrThrow
 */
export type RecurringSlotFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RecurringSlot
   */
  select?: Prisma.RecurringSlotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RecurringSlot
   */
  omit?: Prisma.RecurringSlotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecurringSlotInclude<ExtArgs> | null
  /**
   * Filter, which RecurringSlot to fetch.
   */
  where: Prisma.RecurringSlotWhereUniqueInput
}

/**
 * RecurringSlot findFirst
 */
export type RecurringSlotFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RecurringSlot
   */
  select?: Prisma.RecurringSlotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RecurringSlot
   */
  omit?: Prisma.RecurringSlotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecurringSlotInclude<ExtArgs> | null
  /**
   * Filter, which RecurringSlot to fetch.
   */
  where?: Prisma.RecurringSlotWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RecurringSlots to fetch.
   */
  orderBy?: Prisma.RecurringSlotOrderByWithRelationInput | Prisma.RecurringSlotOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RecurringSlots.
   */
  cursor?: Prisma.RecurringSlotWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RecurringSlots from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RecurringSlots.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RecurringSlots.
   */
  distinct?: Prisma.RecurringSlotScalarFieldEnum | Prisma.RecurringSlotScalarFieldEnum[]
}

/**
 * RecurringSlot findFirstOrThrow
 */
export type RecurringSlotFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RecurringSlot
   */
  select?: Prisma.RecurringSlotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RecurringSlot
   */
  omit?: Prisma.RecurringSlotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecurringSlotInclude<ExtArgs> | null
  /**
   * Filter, which RecurringSlot to fetch.
   */
  where?: Prisma.RecurringSlotWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RecurringSlots to fetch.
   */
  orderBy?: Prisma.RecurringSlotOrderByWithRelationInput | Prisma.RecurringSlotOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RecurringSlots.
   */
  cursor?: Prisma.RecurringSlotWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RecurringSlots from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RecurringSlots.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RecurringSlots.
   */
  distinct?: Prisma.RecurringSlotScalarFieldEnum | Prisma.RecurringSlotScalarFieldEnum[]
}

/**
 * RecurringSlot findMany
 */
export type RecurringSlotFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RecurringSlot
   */
  select?: Prisma.RecurringSlotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RecurringSlot
   */
  omit?: Prisma.RecurringSlotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecurringSlotInclude<ExtArgs> | null
  /**
   * Filter, which RecurringSlots to fetch.
   */
  where?: Prisma.RecurringSlotWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RecurringSlots to fetch.
   */
  orderBy?: Prisma.RecurringSlotOrderByWithRelationInput | Prisma.RecurringSlotOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing RecurringSlots.
   */
  cursor?: Prisma.RecurringSlotWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RecurringSlots from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RecurringSlots.
   */
  skip?: number
  distinct?: Prisma.RecurringSlotScalarFieldEnum | Prisma.RecurringSlotScalarFieldEnum[]
}

/**
 * RecurringSlot create
 */
export type RecurringSlotCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RecurringSlot
   */
  select?: Prisma.RecurringSlotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RecurringSlot
   */
  omit?: Prisma.RecurringSlotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecurringSlotInclude<ExtArgs> | null
  /**
   * The data needed to create a RecurringSlot.
   */
  data: Prisma.XOR<Prisma.RecurringSlotCreateInput, Prisma.RecurringSlotUncheckedCreateInput>
}

/**
 * RecurringSlot createMany
 */
export type RecurringSlotCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many RecurringSlots.
   */
  data: Prisma.RecurringSlotCreateManyInput | Prisma.RecurringSlotCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * RecurringSlot createManyAndReturn
 */
export type RecurringSlotCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RecurringSlot
   */
  select?: Prisma.RecurringSlotSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RecurringSlot
   */
  omit?: Prisma.RecurringSlotOmit<ExtArgs> | null
  /**
   * The data used to create many RecurringSlots.
   */
  data: Prisma.RecurringSlotCreateManyInput | Prisma.RecurringSlotCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecurringSlotIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * RecurringSlot update
 */
export type RecurringSlotUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RecurringSlot
   */
  select?: Prisma.RecurringSlotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RecurringSlot
   */
  omit?: Prisma.RecurringSlotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecurringSlotInclude<ExtArgs> | null
  /**
   * The data needed to update a RecurringSlot.
   */
  data: Prisma.XOR<Prisma.RecurringSlotUpdateInput, Prisma.RecurringSlotUncheckedUpdateInput>
  /**
   * Choose, which RecurringSlot to update.
   */
  where: Prisma.RecurringSlotWhereUniqueInput
}

/**
 * RecurringSlot updateMany
 */
export type RecurringSlotUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update RecurringSlots.
   */
  data: Prisma.XOR<Prisma.RecurringSlotUpdateManyMutationInput, Prisma.RecurringSlotUncheckedUpdateManyInput>
  /**
   * Filter which RecurringSlots to update
   */
  where?: Prisma.RecurringSlotWhereInput
  /**
   * Limit how many RecurringSlots to update.
   */
  limit?: number
}

/**
 * RecurringSlot updateManyAndReturn
 */
export type RecurringSlotUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RecurringSlot
   */
  select?: Prisma.RecurringSlotSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RecurringSlot
   */
  omit?: Prisma.RecurringSlotOmit<ExtArgs> | null
  /**
   * The data used to update RecurringSlots.
   */
  data: Prisma.XOR<Prisma.RecurringSlotUpdateManyMutationInput, Prisma.RecurringSlotUncheckedUpdateManyInput>
  /**
   * Filter which RecurringSlots to update
   */
  where?: Prisma.RecurringSlotWhereInput
  /**
   * Limit how many RecurringSlots to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecurringSlotIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * RecurringSlot upsert
 */
export type RecurringSlotUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RecurringSlot
   */
  select?: Prisma.RecurringSlotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RecurringSlot
   */
  omit?: Prisma.RecurringSlotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecurringSlotInclude<ExtArgs> | null
  /**
   * The filter to search for the RecurringSlot to update in case it exists.
   */
  where: Prisma.RecurringSlotWhereUniqueInput
  /**
   * In case the RecurringSlot found by the `where` argument doesn't exist, create a new RecurringSlot with this data.
   */
  create: Prisma.XOR<Prisma.RecurringSlotCreateInput, Prisma.RecurringSlotUncheckedCreateInput>
  /**
   * In case the RecurringSlot was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RecurringSlotUpdateInput, Prisma.RecurringSlotUncheckedUpdateInput>
}

/**
 * RecurringSlot delete
 */
export type RecurringSlotDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RecurringSlot
   */
  select?: Prisma.RecurringSlotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RecurringSlot
   */
  omit?: Prisma.RecurringSlotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecurringSlotInclude<ExtArgs> | null
  /**
   * Filter which RecurringSlot to delete.
   */
  where: Prisma.RecurringSlotWhereUniqueInput
}

/**
 * RecurringSlot deleteMany
 */
export type RecurringSlotDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RecurringSlots to delete
   */
  where?: Prisma.RecurringSlotWhereInput
  /**
   * Limit how many RecurringSlots to delete.
   */
  limit?: number
}

/**
 * RecurringSlot without action
 */
export type RecurringSlotDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RecurringSlot
   */
  select?: Prisma.RecurringSlotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RecurringSlot
   */
  omit?: Prisma.RecurringSlotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RecurringSlotInclude<ExtArgs> | null
}
