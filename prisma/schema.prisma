// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Calendar {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#4f46e5")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events Event[]
  members CalendarParticipant[]
  recurringSlots RecurringSlot[]
}

model Event {
  id          String   @id @default(cuid())
  calendarId  String
  title       String
  description String?
  startAt     DateTime
  endAt       DateTime
  allDay      Boolean  @default(false)
  color       String   @default("#60a5fa")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  calendar Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  attendees EventParticipant[]

  @@index([calendarId, startAt, endAt])
}

model Participant {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  calendars CalendarParticipant[]
  events    EventParticipant[]
}

model CalendarParticipant {
  id          String   @id @default(cuid())
  calendarId  String
  participantId String

  calendar    Calendar    @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  participant Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([calendarId, participantId])
  @@index([participantId])
}

// 반복 일정 슬롯: 특정 요일과 시간대에 반복되는 파티 시간
model RecurringSlot {
  id             String  @id @default(cuid())
  calendarId     String
  dayOfWeek      Int     // 0=일요일 ... 6=토요일
  startMinutes   Int     // 자정 기준 분 단위
  endMinutes     Int
  startsOn       DateTime @default(now())
  endsOn         DateTime?
  eventTitle     String  // 원래 이벤트 제목 저장
  eventStartDate DateTime // 원래 이벤트의 시작일 (해당 주의 반복 생성 기준)
  participantNames String? // 참여자 이름 (JSON 배열 형태로 저장)
  color          String  @default("#60a5fa")

  calendar Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)

  @@index([calendarId, dayOfWeek, startsOn])
}

// 이벤트-참여자 (태그처럼 선택/생성)
model EventParticipant {
  id            String @id @default(cuid())
  eventId       String
  participantId String

  event       Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  participant Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([eventId, participantId])
  @@index([participantId])
}
